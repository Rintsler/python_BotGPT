import json
import sqlite3
import datetime
import openai
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, LabeledPrice
from data.bufer import Buf
from data.config import bot, dp, YOOTOKEN
from data.data_base import DB_PATH, conn
from handlers.keyboard import menu_keyboard, inline_markup_submit, inline_markup_reg, menu_keyboard_free
from utils.apps import cursor, get_subscription_info, get_subscription_date, get_subscription, get_user, \
    get_user_balance, generate_response, get_free_request, free_req_true
from utils.update_keys import get_unused_key


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É."
        "–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–∞–º –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
    )
    free_req = get_free_request(user_id)
    flag = free_req_true(user_id)
    if (free_req and flag) == 0:
        cursor.execute('''
                        INSERT INTO users_free (user_id, free_request, flag)
                        VALUES (?, ?, ?)
                    ''', (user_id, 5, 1))
        conn.commit()
        await message.answer(text, reply_markup=menu_keyboard_free)
    else:
        await message.answer(
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {free_req}. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            reply_markup=inline_markup_submit)


# ===================================================================================================================
#                                            –ü–û–î–ü–ò–°–ö–ê
# ===================================================================================================================

@dp.message_handler(lambda message: message.text == "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞")
async def send_subscription_menu(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if get_user(user_id):
        if get_subscription(user_id) is None:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=inline_markup_submit)
        else:
            subscription = get_subscription(user_id)
            await message.answer(f"–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ {subscription}. –î–ª—è –∏–Ω–≤–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é üìù –¢–æ–∫–µ–Ω—ã")
    else:
        await message.answer("–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.", reply_markup=inline_markup_reg)


@dp.message_handler(lambda message: message.text == "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ")
async def send_subscription_info(message: types.Message):
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∏:\n–°—Ç–∞—Ä—Ç - 150 —Ä. (–ª–∏–º–∏—Ç: 10000 —Ç–æ–∫–µ–Ω–æ–≤)"
                         "\n–ö–æ–º—Ñ–æ—Ä—Ç - 500 —Ä. (–ª–∏–º–∏—Ç: 50000 —Ç–æ–∫–µ–Ω–æ–≤)"
                         "\n–ü—Ä–æ—Ñ–∏ - 1000 —Ä. (–ª–∏–º–∏—Ç: 100000 —Ç–æ–∫–µ–Ω–æ–≤)", reply_markup=inline_markup_reg)


@dp.message_handler(lambda message: message.text == "üìù –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤")
async def send_subscription_info(message: types.Message):
    free_request = get_free_request(user_id=message.from_user.id)
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {free_request}", reply_markup=inline_markup_reg)


# ===================================================================================================================
#                                            –ü–†–û–§–ò–õ–¨
# ===================================================================================================================
@dp.message_handler(lambda message: message.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if get_user(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cursor.execute('SELECT user_id, registration_date FROM users WHERE user_id = ?', (user_id,))
        user_info = cursor.fetchone()
        user_id, registration_date = user_info

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = get_user_balance(user_id)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_info = get_subscription_info(user_id)
        if get_subscription(user_id):
            subscription = get_subscription(user_id)
        else:
            subscription = "–ù–µ—Ç"
        sub_date = get_subscription_date(user_id)

        profile_text = (
            f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üë§ –í–∞—à –∞–π–¥–∏: {user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription}\n"
            f"üìï –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {subscription_info['remaining_tokens']}\n"
            f"‚è≥ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
            f"üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_info['remaining_days']}\n"

            f"\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ 10000 —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è"
        )
        await message.answer(profile_text, reply_markup=menu_keyboard)
    else:
        await message.answer("–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.", reply_markup=inline_markup_reg)


# ===================================================================================================================
#                                            –¢–û–ö–ï–ù–´
# ===================================================================================================================
@dp.message_handler(lambda message: message.text == "üìù –¢–æ–∫–µ–Ω—ã")
async def show_tokens(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if get_user(user_id):
        cursor.execute('SELECT subscribe, tokens, tokens_used FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()

        if user_data:
            subscribe_type, total_tokens, tokens_used = user_data
            remaining_tokens = total_tokens - tokens_used
            if total_tokens != 0:
                response_text = (
                    f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ "{subscribe_type}": {total_tokens}\n'
                    f'\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {remaining_tokens}'
                )
                await message.answer(response_text, reply_markup=menu_keyboard)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.\n\
–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω–∞–¥–æ –∏–∑ –º–µ–Ω—é –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=inline_markup_submit)
    else:
        await message.answer("–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.", reply_markup=inline_markup_reg)


# ===================================================================================================================
#                                            –ß–ê–¢
# ===================================================================================================================
@dp.message_handler(lambda message: message.text == "üë• –°–æ–∑–¥–∞—Ç—å —á–∞—Ç")
async def create_chat(message: types.Message):
    user_id = message.from_user.id
    if get_user(user_id):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            UPDATE users
            SET chat_history = ?,
                response_history = ?
            WHERE user_id = ?
        ''', ('[]', '[]', user_id))  # –û–±–Ω—É–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        conn.commit()

        await message.answer("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=menu_keyboard)
    else:
        free_request = get_free_request(user_id)
        await message.answer(f"–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.\n"
                             f"–£ –≤–∞—Å {free_request} –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=menu_keyboard_free)


# ===================================================================================================================
#
# ===================================================================================================================
@dp.message_handler(commands=['dalle'])
async def send_image(message: types.Message):
    api_key = get_unused_key()
    response = openai.Image.create(
        api_key=api_key,
        prompt=message.text,
        n=1,
        size="1024x1024",
    )
    await message.answer_photo(response["data"][0]["url"])


# ===================================================================================================================
#                                            –í–´–ë–û–† –ü–û–î–ü–ò–°–ö–ò "–°–¢–ê–†–¢"
# ===================================================================================================================
@dp.callback_query_handler(text='st')
async def submit_start(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                           description="qwe",
                           payload="month_sub", provider_token=YOOTOKEN, currency="RUB",
                           start_parameter="test_bot",
                           prices=[LabeledPrice(label="–†—É–±", amount=15000)])
    Buf.name = "–°—Ç–∞—Ä—Ç"


# ===================================================================================================================
#                                            –í–´–ë–û–† –ü–û–î–ü–ò–°–ö–ò "–ö–û–ú–§–û–†–¢"
# ===================================================================================================================
@dp.callback_query_handler(text='komf')
async def submit_komf(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                           description="–ü–æ–¥–ø–∏—Å–∫–∞ - –ö–æ–º—Ñ–æ—Ä—Ç",
                           payload="month_sub", provider_token=YOOTOKEN, currency="RUB",
                           start_parameter="test_bot",
                           prices=[LabeledPrice(label="–†—É–±", amount=50000)])
    Buf.name = "–ö–æ–º—Ñ–æ—Ä—Ç"


# ===================================================================================================================
#                                            –í–´–ë–û–† –ü–û–î–ü–ò–°–ö–ò "–ü–†–û–§–ò"
# ===================================================================================================================
@dp.callback_query_handler(text='pro')
async def submit_pro(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id,
                           title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                           description="–ü–æ–¥–ø–∏—Å–∫–∞ - –ü—Ä–æ—Ñ–∏",
                           payload="month_sub",
                           provider_token=YOOTOKEN,
                           currency="RUB",
                           start_parameter="test_bot",
                           prices=[LabeledPrice(label="–†—É–±", amount=100000)])
    Buf.name = "–ü—Ä–æ—Ñ–∏"


# ===================================================================================================================
#                                            –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
# ===================================================================================================================
@dp.callback_query_handler(text='reg')
async def process_registration(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username
    registration_date = call.message.date

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        response_text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            INSERT INTO users (user_id, username, registration_date)
            VALUES (?, ?, ?)
        ''', (user_id, username, registration_date))
        conn.commit()
        response_text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"

    await call.message.answer(response_text, reply_markup=menu_keyboard)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä - –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# ===================================================================================================================
#                                            –û–ü–õ–ê–¢–ê –ü–û–î–ü–ò–°–ö–ò
# ===================================================================================================================
@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    subscribe_type = Buf.name
    sub_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    tokens = 0

    if subscribe_type == '–°—Ç–∞—Ä—Ç':
        tokens = 10000
    elif subscribe_type == '–ö–æ–º—Ñ–æ—Ä—Ç':
        tokens = 50000
    elif subscribe_type == '–ü—Ä–æ—Ñ–∏':
        tokens = 100000

    cursor.execute('''
            UPDATE users
            SET subscribe = ?, sub_date = ?, tokens = ?
            WHERE user_id = ?
        ''', (subscribe_type, sub_date, tokens, user_id))
    conn.commit()

    response_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ {subscribe_type}. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {tokens} —Ç–æ–∫–µ–Ω–æ–≤. –°–ø–∞—Å–∏–±–æ!'
    await message.answer(response_text, reply_markup=menu_keyboard)


# ===================================================================================================================
#                                            –õ–Æ–ë–û–ï –°–û–û–ë–©–ï–ù–ò–ï
# ===================================================================================================================
@dp.message_handler()
async def process_question(message: types.Message):
    user_id = message.from_user.id
    free_req = get_free_request(user_id)
    user_question = message.text
    user_history, response_history = ['', '']
    print(f"User question: {user_question}")
    if (get_user(user_id) and get_subscription(user_id)) or free_req != 0:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /dalle –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_image
        if "/dalle" in user_question:
            await send_image(message)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
        processing_message = await message.answer("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT chat_history, response_history FROM users WHERE user_id = ?', (user_id,))
        if cursor.fetchone():
            user_history, response_history = cursor.fetchone()
        user_history = json.loads(user_history) if user_history else []
        response_history = json.loads(response_history) if response_history else []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
        user_history.append({"role": "user", "content": user_question})

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
                            UPDATE users
                            SET chat_history = ?,
                            response_history = ?
                            WHERE user_id = ?
                            ''', (
            json.dumps(user_history, ensure_ascii=False), json.dumps(response_history, ensure_ascii=False),
            user_id))
        conn.commit()

        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞

        response = generate_response(user_history, user_id, message)
        print(f"OpenAI response: {response}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI GPT
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        response_history.append({"role": "assistant", "content": response})
        cursor.execute('''
                        UPDATE users
                        SET response_history = ?
                        WHERE user_id = ?
                    ''', (json.dumps(response_history, ensure_ascii=False), user_id))
        conn.commit()
        await message.answer(response, reply_markup=menu_keyboard)
    else:
        await message.answer(f"–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                             reply_markup=inline_markup_reg)
