import json
from aiogram.dispatcher import FSMContext
from aiogram import types
from data.config import bot, dp
from data.data_base import DB_PATH, conn
from handlers.keyboard import subscription_keyboard, menu_keyboard
from utils.apps import *


@dp.message_handler(lambda message: message.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cursor.execute('SELECT user_id, registration_date FROM users WHERE user_id = ?', (user_id,))
    user_info = cursor.fetchone()

    if user_info:
        user_id, registration_date = user_info
        balance = get_user_balance(user_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_info = get_subscription_info(user_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription = get_subscription(user_id)
        sub_date = get_subscription_date(user_id)

        profile_text = (
            f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üë§ –í–∞—à –∞–π–¥–∏: {user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription}\n"
            f"üìï –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {subscription_info['remaining_tokens']}\n"
            f"‚è≥ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
            f"üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_info['remaining_days']}\n"

            f"\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ 10000 —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è"
        )

        await message.answer(profile_text, reply_markup=menu_keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞"
@dp.message_handler(lambda message: message.text == "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞")
async def send_subscription_menu(message: types.Message):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:"
    await message.answer(text, reply_markup=subscription_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(lambda message: message.text in ["–°—Ç–∞—Ä—Ç", "–ö–æ–º—Ñ–æ—Ä—Ç", "–ü—Ä–æ—Ñ–∏"])
async def handle_subscription_choice(message: types.Message):
    user_id = message.from_user.id
    subscribe_type = message.text
    sub_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if subscribe_type == "–°—Ç–∞—Ä—Ç":
        tokens = 10000
    elif subscribe_type == "–ö–æ–º—Ñ–æ—Ä—Ç":
        tokens = 50000
    elif subscribe_type == "–ü—Ä–æ—Ñ–∏":
        tokens = 100000
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
        tokens = 0
    # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users 
        SET subscribe = ?, sub_date = ?, tokens = ? 
        WHERE user_id = ?
    ''', (subscribe_type, sub_date, tokens, user_id))
    conn.commit()

    response_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ {subscribe_type}. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {tokens} —Ç–æ–∫–µ–Ω–æ–≤. –°–ø–∞—Å–∏–±–æ!'
    await message.answer(response_text, reply_markup=menu_keyboard)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."
    )
    await message.answer(text, reply_markup=menu_keyboard)


@dp.message_handler(lambda message: message.text == "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def process_registration(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    registration_date = message.date

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        response_text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            INSERT INTO users (user_id, username, registration_date)
            VALUES (?, ?, ?)
        ''', (user_id, username, registration_date))
        conn.commit()
        response_text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"

    await message.answer(response_text, reply_markup=menu_keyboard)


@dp.message_handler(lambda message: message.text == "üìù –¢–æ–∫–µ–Ω—ã")
async def show_tokens(message: types.Message):
    user_id = message.from_user.id

    cursor.execute('SELECT subscribe, tokens, tokens_used FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        subscribe_type, total_tokens, tokens_used = user_data
        remaining_tokens = total_tokens - tokens_used

        response_text = (
            f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ "{subscribe_type}": {total_tokens}\n'
            f'\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {remaining_tokens}'
        )
    else:
        response_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    await message.answer(response_text, reply_markup=menu_keyboard)


@dp.message_handler(lambda message: message.text == "üë• –°–æ–∑–¥–∞—Ç—å —á–∞—Ç")
async def create_chat(message: types.Message):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
        UPDATE users
        SET chat_history = ?,
            response_history = ?
        WHERE user_id = ?
    ''', ('[]', '[]', user_id))  # –û–±–Ω—É–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    conn.commit()

    await message.answer("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=menu_keyboard)


@dp.message_handler()
async def process_question(message: types.Message,state: FSMContext):
    user_state = await state.get_state()
    user_id = message.from_user.id
    user = get_user(user_id)
    # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_state is None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if user:
            user_question = message.text
            print(f"User question: {user_question}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
            processing_message = await message.answer("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT chat_history, response_history FROM users WHERE user_id = ?', (user_id,))
            user_history, response_history = cursor.fetchone()
            user_history = json.loads(user_history) if user_history else []
            response_history = json.loads(response_history) if response_history else []

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
            user_history.append({"role": "user", "content": user_question})

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                UPDATE users
                SET chat_history = ?,
                    response_history = ?
                WHERE user_id = ?
            ''', (
            json.dumps(user_history, ensure_ascii=False), json.dumps(response_history, ensure_ascii=False), user_id))
            conn.commit()

            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞

            response = generate_response(user_history, user_id)
            print(f"OpenAI response: {response}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
            await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI GPT
            await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
            response_history.append({"role": "assistant", "content": response})
            cursor.execute('''
                UPDATE users
                SET response_history = ?
                WHERE user_id = ?
            ''', (json.dumps(response_history, ensure_ascii=False), user_id))
            conn.commit()
            # –ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            await UserStates.FIRST_MESSAGE.set()
            await message.answer(response, reply_markup=menu_keyboard)
        else: await message.answer("–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
