# -*- coding: utf-8 -*-
from aiogram import types
import datetime
import sqlite3
from data.data_base import DB_PATH, cursor, conn, generate_response
from handlers import subscription_keyboard, menu_keyboard

from loader import dp



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞"
@dp.message_handler(lambda message: message.text == "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞")
async def send_subscription_menu(message: types.Message):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:"
    await message.answer(text, reply_markup=subscription_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(lambda message: message.text in ["–°—Ç–∞—Ä—Ç", "–ö–æ–º—Ñ–æ—Ä—Ç", "–ü—Ä–æ—Ñ–∏"])
async def handle_subscription_choice(message: types.Message):
    user_id = message.from_user.id
    subscribe_type = message.text
    sub_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if subscribe_type == "–°—Ç–∞—Ä—Ç":
        tokens = 10000
    elif subscribe_type == "–ö–æ–º—Ñ–æ—Ä—Ç":
        tokens = 50000
    elif subscribe_type == "–ü—Ä–æ—Ñ–∏":
        tokens = 100000
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
        tokens = 0
    # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users 
        SET subscribe = ?, sub_date = ?, tokens = ? 
        WHERE user_id = ?
    ''', (subscribe_type, sub_date, tokens, user_id))
    conn.commit()

    response_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ {subscribe_type}. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {tokens} —Ç–æ–∫–µ–Ω–æ–≤. –°–ø–∞—Å–∏–±–æ!'
    await message.answer(response_text, reply_markup=menu_keyboard)


@dp.message_handler(lambda message: message.text == "üìù –¢–æ–∫–µ–Ω—ã")
async def show_tokens(message: types.Message):
    user_id = message.from_user.id

    # –ó–∞–º–µ–Ω–∏—Ç–µ "your_table_name" –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT subscribe, tokens, tokens_used FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        subscribe_type, total_tokens, tokens_used = user_data
        remaining_tokens = total_tokens - tokens_used

        response_text = (
            f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ "{subscribe_type}": {total_tokens}\n'
            f'\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {remaining_tokens}'
        )
    else:
        response_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    await message.answer(response_text, reply_markup=menu_keyboard)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."
    )
    await message.answer(text, reply_markup=menu_keyboard)


@dp.message_handler(lambda message: message.text == "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def process_registration(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    registration_date = message.date

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        response_text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            INSERT INTO users (user_id, username, registration_date)
            VALUES (?, ?, ?)
        ''', (user_id, username, registration_date))
        conn.commit()
        response_text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"

    await message.answer(response_text, reply_markup=menu_keyboard)


@dp.message_handler()
async def process_question(message: types.Message):
    user_question = message.text
    print(f"User question: {user_question}")

    response = generate_response(user_question)
    print(f"OpenAI response: {response}")

    await message
