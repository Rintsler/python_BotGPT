import json
import random
import openai
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.payload import decode_payload
from app.modul_Kandinsky2_2 import kandinsky2_2
from app.moduls import (generate_response, profile, counting_pay, Subscribe, calc_sum, ref_menu, media_group_img,
                        media_group_img_start)
from app.update_keys import get_unused_key
from data.config import bot, chat_id
from data.db_app import (reg_user, new_chat, get_user_history, update_user_history,
                         add_response_to_history, set_state_ai, get_state_ai, add_user, update_requests, get_flag,
                         get_req, get_balans, get_user)
from data.metadata import Metadata
from nav.keyboard import (inline_markup_reg, menu_keyboard, menu_profile, inline_submit_preview, inline_tp, menu_ai,
                          menu_profile_ref, inline_back_to_ref)
from aiogram.utils.deep_linking import create_start_link
from aiogram.filters import CommandObject
from aiogram.fsm.state import StatesGroup, State


class StateBot(StatesGroup):
    banking_details_input = State()
    bonus_output = State()


async def start_cmd(message: types.Message, command: CommandObject, state: FSMContext):
    await state.set_state(StateBot.s)
    first_name = message.from_user.first_name
    username = message.from_user.username
    user_id = message.from_user.id
    referrer = None

    args = command.args  # –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    if args:
        # –î–µ—à–∏—Ñ—Ä—É–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        referrer = decode_payload(args)
        referrer = int(referrer)

        if int(referrer) != user_id:
            ref_username = await get_username_by_user_id(bot, referrer)

            if ref_username:
                check = await get_user(user_id)
                if not check:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await add_user(user_id, username, referrer, True)
                    await message.answer('<b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –¥—Ä—É–≥–∞. '
                                         '–û–Ω –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å –æ—Ç –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞. –ü—Ä–∏–≤–æ–¥–∏—Ç–µ '
                                         '–¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞) '
                                         '–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!</b> ü§ë',
                                         reply_markup=inline_markup_reg)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    media = await media_group_img_start()
                    await bot.send_media_group(user_id, media)

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    await bot.send_message(chat_id=referrer, text=f'<b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏: \nid: {user_id}'
                                                                  f'\n{username}\n\n</b>'
                                                                  f'–° –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã –µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –≤–∞—à '
                                                                  f'–±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10% –æ—Ç –µ–≥–æ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã!')
                else:
                    await message.answer('<b>üßê –í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —É—Å–ª–æ–≤–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ '
                                         '—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>')
                    await message.answer_sticker(
                        'CAACAgIAAxkBAAEECUNl8BLj6i4vqtzflyxNDFMaxHsZUQACNxEAAl5L4Ete45bSAcoO1jQE')
            else:
                await message.answer('<b>üßê –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª. '
                                     '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 4Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£</b>')
                await message.answer_sticker('CAACAgIAAxkBAAEECUNl8BLj6i4vqtzflyxNDFMaxHsZUQACNxEAAl5L4Ete45bSAcoO1jQE')
        else:
            await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ üòÑ')
            await message.answer_sticker('CAACAgIAAxkBAAEECUNl8BLj6i4vqtzflyxNDFMaxHsZUQACNxEAAl5L4Ete45bSAcoO1jQE')

    check = await get_user(user_id)
    if not check:
        # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º
        await add_user(user_id, username, referrer, False)
        await message.answer(
            f'<b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>'
            f'\n\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, <b><i>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å</i></b> –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ \n'
            f'<b>[ ‚úîÔ∏è –ì–æ—Ç–æ–≤–æ ]</b>.\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ <b><u>30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö</u></b> –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Å Izi –∏ '
            f'<b><u>10 –∑–∞–ø—Ä–æ—Å–æ–≤</u></b> –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.',
            reply_markup=inline_markup_reg)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        media = await media_group_img_start()
        await bot.send_media_group(user_id, media)


async def get_username_by_user_id(bot: Bot, user_id: int):
    try:
        user = await bot.get_chat_member(chat_id=user_id, user_id=user_id)
        return user.user.username if user.user.username else "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None


# ======================================================================================================================
#                               –ü–æ–¥–ø–∏—Å–∫–∞
# ======================================================================================================================
async def submit(call: types.CallbackQuery):
    user_id = call.from_user.id
    flag = await get_flag(user_id)
    subscribe_text = await Subscribe()
    if flag > 1:
        await bot.edit_message_text(
            f'‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>, —É –≤–∞—Å –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ.\n\n',
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline_submit_preview
        )
    else:
        await bot.edit_message_text(subscribe_text,
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=inline_submit_preview)


# =====================================================================================================================
# –ü–†–û–í–ï–†–ö–ê –ù–ê –ß–õ–ï–ù–°–¢–í–û –í –ö–ê–ù–ê–õ–ï
# =====================================================================================================================
async def check_sub(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
    print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ: ', member)
    if member.status != 'left':
        flag = await get_flag(user_id)
        result = await get_req(user_id)

        if result:
            request, request_img = result

        if flag is None or flag == 0:
            flag = 1
            request = 30
            request_img = 10
            registration_date = call.message.date.strftime('%d.%m.%Y')
            await reg_user(user_id, registration_date, request, request_img, flag)
            await call.message.answer(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –£ –≤–∞—Å <b><u>30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö</u></b> –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Å Izi –∏ '
                '<b><u>10 –∑–∞–ø—Ä–æ—Å–æ–≤</u></b> –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ü´∂üèª'
                '–ü–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è <b><u>10 –∑–∞–ø—Ä–æ—Å–æ–≤</u></b> '
                '–¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ <b><u>5 –∑–∞–ø—Ä–æ—Å–æ–≤</u></b> –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.',
                reply_markup=menu_keyboard)
        elif flag == 1:
            await call.message.answer(
                f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ <b><u>{request}</u></b> '
                f'–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∏ <b><u>{request_img}</u></b> –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ü´∂üèª',
                reply_markup=menu_keyboard)
        else:
            await call.message.answer(
                f'–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!'
                f'\n–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è '
                f'–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ\n<b>[ üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å ]</b>" üòâ',
                reply_markup=menu_keyboard)
    else:
        await call.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ <b><u><i>–ø–æ–¥–ø–∏—à–∏—Å—å</i></u></b> –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª üòä',
                                  reply_markup=inline_markup_reg)


# ======================================================================================================================
#                               –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
# ======================================================================================================================
async def Light(call: types.CallbackQuery):
    Metadata.subscription = 'Light'
    Metadata.calc_sum_flag = True
    await calc_sum(100)
    Metadata.sub_sum_db = 100
    await bot.edit_message_text('üìù –î–∏–∞–ª–æ–≥ —Å Izi - <u>35 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</u>\n'
                                'üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - <u>15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</u>\n\n'
                                '<b>–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ë–∞–∑–æ–≤—ã–π?</b>',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text=f'–ú–µ—Å—è—Ü - {Metadata.sub_sum1} —Ä.',
                                                                 callback_data='month')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'6 –º–µ—Å—è—Ü–µ–≤ - {Metadata.sub_sum2} —Ä.',
                                                                 callback_data='month_6')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'–ì–æ–¥ - {Metadata.sub_sum3} —Ä.',
                                                                 callback_data='year')
                                        ],
                                        [
                                            InlineKeyboardButton(text="‚Üê –Ω–∞–∑–∞–¥", callback_data='back_to_subscriptions')
                                        ]
                                    ],
                                    resize_keyboard=True
                                )
                                )


async def Middle(call: types.CallbackQuery):
    Metadata.subscription = 'Middle'
    Metadata.calc_sum_flag = True
    await calc_sum(250)
    Metadata.sub_sum_db = 250
    await bot.edit_message_text('üìù –î–∏–∞–ª–æ–≥ —Å Izi - <u>–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</u> üò∫\n'
                                'üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - <u>40 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</u>\n\n'
                                '<b>–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π?</b>',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text=f'–ú–µ—Å—è—Ü - {Metadata.sub_sum1} —Ä.',
                                                                 callback_data='month')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'6 –º–µ—Å—è—Ü–µ–≤ - {Metadata.sub_sum2} —Ä.',
                                                                 callback_data='month_6')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'–ì–æ–¥ - {Metadata.sub_sum3} —Ä.',
                                                                 callback_data='year')
                                        ],
                                        [
                                            InlineKeyboardButton(text="‚Üê –Ω–∞–∑–∞–¥", callback_data='back_to_subscriptions')
                                        ]
                                    ],
                                    resize_keyboard=True
                                )
                                )


async def Full(call: types.CallbackQuery):
    Metadata.subscription = 'Premium'
    Metadata.calc_sum_flag = True
    await calc_sum(450)
    Metadata.sub_sum_db = 450
    await bot.edit_message_text('‚ôæÔ∏è <u>–ü–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç</u> –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ Izi ü§©\n\n'
                                '<b>–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ - –ü—Ä–µ–º–∏—É–º?</b>',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text=f'–ú–µ—Å—è—Ü - {Metadata.sub_sum1} —Ä.',
                                                                 callback_data='month')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'6 –º–µ—Å—è—Ü–µ–≤ - {Metadata.sub_sum2} —Ä.',
                                                                 callback_data='month_6')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'–ì–æ–¥ - {Metadata.sub_sum3} —Ä.',
                                                                 callback_data='year')
                                        ],
                                        [
                                            InlineKeyboardButton(text="‚Üê –Ω–∞–∑–∞–¥", callback_data='back_to_subscriptions')
                                        ]
                                    ],
                                    resize_keyboard=True
                                )
                                )


# ======================================================================================================================
#                               –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤
# ======================================================================================================================
async def back_to_subscriptions(call: types.CallbackQuery):
    Metadata.calc_sum_flag = True
    subscribe_text = await Subscribe()
    await bot.edit_message_text(subscribe_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_submit_preview)


# ======================================================================================================================
#                               –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
# ======================================================================================================================
async def month(call: types.CallbackQuery):
    await counting_pay(1, call.from_user.id)
    Metadata.sub_period = 1


async def month_6(call: types.CallbackQuery):
    await counting_pay(5, call.from_user.id)
    Metadata.sub_period = 6


async def year(call: types.CallbackQuery):
    await counting_pay(10, call.from_user.id)
    Metadata.sub_period = 12


# ======================================================================================================================
#                               –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
# ======================================================================================================================
async def cancel_payment(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


# ======================================================================================================================
#                               –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
# ======================================================================================================================
async def tp(call: types.CallbackQuery):
    await bot.edit_message_text('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É —Ä—è–¥–æ–≤–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å:'
                                ' https://t.me/Rintzler',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_tp)


# ======================================================================================================================
#                               –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
# ======================================================================================================================
async def back_to_profile(call: types.CallbackQuery):
    user_id = call.from_user.id
    profile_text = await profile(user_id)
    await bot.edit_message_text(profile_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=menu_profile)


# ======================================================================================================================
#                               –í—ã–±–æ—Ä –Ω–µ–π—Ä–æ–Ω–∫–∏
# ======================================================================================================================
async def for_kandinsky2_2(call: types.CallbackQuery):
    await call.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω ‚è≥', show_alert=True)


# ======================================================================================================================
#                               –í—ã–±–æ—Ä –Ω–µ–π—Ä–æ–Ω–∫–∏
# ======================================================================================================================
async def kandinsky3_0(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'kandinsky3_0'
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–û–∫! –î–∞–ª—å—à–µ —è –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ üë©‚Äçüé®\n\n'
                              '–§–æ—Ä–º—É–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏\n'
                              '\n- –û–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: '
                              '–¥–µ–≤—É—à–∫–∞, —Ä–µ–±–µ–Ω–æ–∫, –∫–æ—Ç, –∂–∏—Ä–∞—Ñ, –º–∞—à–∏–Ω–∞, —è–±–ª–æ–∫–æ, –±–∞—à–Ω—è –∏ —Ç.–¥.'
                              '\n- –ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å—É: –∫–∞–∫–∞—è –æ–¥–µ–∂–¥–∞, '
                              '–∫—É–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç, –ø–æ–∑–∞, —Ü–≤–µ—Ç –∏ —Ç.–¥.'
                              '\n- –î–∞–ª–µ–µ –¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≥–¥–µ –Ω–∞—à –æ–±—ä–µ–∫—Ç, –∫–∞–∫–æ–π —É –Ω–µ–≥–æ —Ñ–æ–Ω: '
                              '–º–æ—Ä–µ, –≥–æ—Ä–æ–¥, –≥–æ—Ä—ã, –∫–∞–±–∏–Ω–µ—Ç, –±–µ–∑ —Ñ–æ–Ω–∞'
                              '\n- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ø–æ–ø-–∞—Ä—Ç, —Ç–µ—Ö–Ω–æ-–º–∏—Å—Ç–∏–∫–∞, –±–∞—Ä–æ–∫–∫–æ –∏ —Ç.–¥. '
                              '\n- –ï—Å–ª–∏ —Å—Ç–∏–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, —Ç–æ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å–µ.\n\n'
                              '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ç–æ –¥–æ–ø–∏—à–∏: 4K, '
                              '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–≤–µ—Ç, –≥–∏–ø–µ—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å, —Å–≤–µ—Ä—Ö–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, '
                              '—Ä–µ–∞–ª–∏–∑–º, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å')


async def dalle_2(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'dalle2'
    await set_state_ai(user_id, state_ai)
    await call.message.answer(f'<b>–û–∫! –î–∞–ª—å—à–µ —è –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏</b> üë©‚Äçüé®\n\n'
                              f'–î–ª—è —ç—Ç–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, '
                              f'–Ω–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Ç–æ–∂–µ –¥–æ–ø—É—Å—Ç–∏–º. '
                              f'\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã, '
                              f'–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —á—ë—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π –∫–∞–¥—Ä, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π. '
                              f'–í —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏—Ç –≤–ø–∏—Å–∞—Ç—å <b>—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å <b>–ø–æ—Ä—Ç—Ä–µ—Ç, '
                              f'–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∞–∫–≤–∞—Ä–µ–ª—å—é, –∫–∞—Ä–∞–Ω–¥–∞—à–Ω—ã–π –Ω–∞–±—Ä–æ—Å–æ–∫ –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ</b>.\n\n'
                              f'–¢–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç <b>–æ—Å–≤–µ—â–µ–Ω–∏—è –≤ –∫–∞–¥—Ä–µ –∏ —Å—Ç–∏–ª—å</b>. –î–æ–ø—É—Å—Ç–∏–º, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ '
                              f'–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–∞–∫ –≤ –∫–æ–º–∏–∫—Å–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∞–Ω–µ—Ä—É –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞. '
                              f'–î–æ–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —è—Ä–∫–æ—Å—Ç–∏.\n\n'
                              f'–í –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å <b>–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ</b>. –ù–∞–ø—Ä–∏–º–µ—Ä, '
                              f'—á—Ç–æ –∫–∞–¥—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ª—É–Ω–æ—Ö–æ–¥, –Ω–æ –∏ –º–æ–º–µ–Ω—Ç, –∫–∞–∫ —Ç–æ—Ç –¥–≤–∏–∂–µ—Ç—Å—è '
                              f'–Ω–∞ —Ñ–æ–Ω–µ –ó–µ–º–ª–∏. –ò–ª–∏ —Å—Ü–µ–Ω—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π '
                              f'–ø–ª—é—à–µ–≤—ã–µ –∑–∞–π—Ü—ã —Å—Ä–∞–∂–∞—é—Ç—Å—è —Å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∞–º–∏.')


async def dalle_3(call: types.CallbackQuery):
    await call.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω ‚è≥', show_alert=True)


async def bot_dialog(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'gpt'
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–ü–æ–Ω—è–ª–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é.')


# ======================================================================================================================
#                               –ó–∞–ø—Ä–æ—Å Delle 2
# ======================================================================================================================
async def send_image(message):
    api_key = await get_unused_key()
    print(api_key)
    response = openai.Image.create(
        api_key=api_key,
        prompt=message.text,
        n=1,
        size="1024x1024",
    )
    await message.answer_photo(response["data"][0]["url"], caption="–ù–µ–π—Ä–æ—Å–µ—Ç—å: Dall-e 2")


# ======================================================================================================================
#                                             –†–µ—Ñ —Å—Å—ã–ª–∫–∞
# ======================================================================================================================
async def get_ref(call: types.CallbackQuery):
    link = await create_start_link(bot, str(call.from_user.id), encode=True)
    await bot.edit_message_text(f"<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{link}\n\n"
                                f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ <b>–±–æ–Ω—É—Å</b> üí≤. "
                                f"üéÅ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 10% —Å –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã "
                                f"—Ç–∞—Ä–∏—Ñ–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                                f"üí∞ –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n"
                                f"–ö–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å:\n"
                                f"‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
                                f"‚Ä¢ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É (–≤ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–µ "
                                f"–¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üí≥)",
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_back_to_ref)


# ======================================================================================================================
#                                             –ú–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏
# ======================================================================================================================
async def ref_program(call: types.CallbackQuery):
    ref_text = await ref_menu()
    await bot.edit_message_text(ref_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=menu_profile_ref)


async def requisites(call: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text('–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à –±–æ–Ω—É—Å.\n'
                                '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –°–ë–ü).'
                                '–î–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º (–ø—Ä–∏–º–µ—Ä: +79991112244 '
                                '—Å–±–µ—Ä–±–∞–Ω–∫ –ò–≤–∞–Ω–æ–≤ –ò.–ò.)',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_back_to_ref)
    await state.set_state(StateBot.banking_details_input)


async def get_the_money(call: types.CallbackQuery, state: FSMContext):
    balans = await get_balans(call.from_user.id)
    await bot.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balans}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞",
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_back_to_ref)
    await state.set_state(StateBot.bonus_output)


# ======================================================================================================================
#                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å
# ======================================================================================================================
async def echo(message: types.Message):
    user_id = message.from_user.id
    member_check = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ\n"
          f"–°—Ç–∞—Ç—É—Å: {member_check.status}\n"
          f"ID: {member_check.user.id}\n"
          f"username: {member_check.user.username}\n"
          f"first_name: {member_check.user.first_name}\n"
          f"is_bot: {member_check.user.is_bot}\n")

    if member_check.status != 'left':
        text = message.text
        result = await get_req(user_id)
        request_img = request = None
        if result:
            request, request_img = result
        # ===========================================================================================================
        #                                             –ü—Ä–æ—Ñ–∏–ª—å
        # ===========================================================================================================
        if text in ['üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å']:
            profile_text = await profile(user_id)
            try:
                await message.answer(profile_text, reply_markup=menu_profile)
            except Exception as e:
                print(f"User id: {user_id}\n–ü—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç")
        # ============================================================================================================
        #                                             –ù–µ–π—Ä–æ—Å–µ—Ç—å
        # ============================================================================================================
        elif text in ['üîÆ –ù–µ–π—Ä–æ—Å–µ—Ç–∏']:
            await message.answer('<b>–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É</b>',
                                 reply_markup=menu_ai)
        # =============================================================================================================
        #                                             –°–æ–∑–¥–∞—Ç—å —á–∞—Ç
        # =============================================================================================================
        elif text in ['ü™Ñ –ù–æ–≤–∞—è —Ç–µ–º–∞']:
            await new_chat(user_id)
            await set_state_ai(user_id, 'gpt')
            await message.answer("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞ –Ω–æ–≤—É—é —Ç–µ–º—É.",
                                 reply_markup=menu_keyboard)
        # =============================================================================================================
        #                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
        # =============================================================================================================
        else:
            state_ai = await get_state_ai(user_id)

            if state_ai == '–û–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞':
                # text_request = await profile(user_id, 1)
                # balans = await get_balans(user_id)
                # if balans == 0:
                #     await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å, –≤–∞—à –±–∞–ª–∞–Ω—Å: <b>{balans}</b>",
                #                          reply_markup=inline_back_to_ref)
                # if balans >= int(text):
                #     await bot.send_message(6280608864, f'<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±–æ–Ω—É—Å–∞:\n\n{text_request}\n\n'
                #                                        f'–ù–∞ —Å—É–º–º—É</b>: {text}')
                # else:
                #     await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É, –≤–∞—à –±–∞–ª–∞–Ω—Å: <b>{balans}</b>",
                #                          reply_markup=inline_back_to_ref)
                await set_state_ai(user_id, 'gpt')

            elif state_ai == 'gpt':
                if request != 0:
                    user_question = message.text
                    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    processing_message = await message.answer(random.choice(Metadata.options))

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    chat_history, response_history = await get_user_history(user_id)

                    chat_history = json.loads(chat_history) if chat_history else []
                    response_history = json.loads(response_history) if response_history else []

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
                    chat_history.append({"role": "user", "content": user_question})

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await update_user_history(user_id, chat_history, response_history)

                    # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    response = await generate_response(user_id, chat_history, message, request, request_img)
                    print(f"OpenAI –æ—Ç–≤–µ—Ç: {response}")

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=processing_message.chat.id,
                                             message_id=processing_message.message_id)

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
                    response_history.append({"role": "assistant", "content": response})
                    await add_response_to_history(user_id, response_history)
                    await message.answer(str(response), reply_markup=menu_keyboard)
                else:
                    await message.answer('–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ Izi –∏—Å—á–µ—Ä–ø–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ üõí',
                                         reply_markup=inline_submit_preview)
            elif request_img != 0:
                if state_ai == 'dalle2':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    message_animation = await message.answer(random.choice(Metadata.options))

                    await send_image(message)

                    if request_img > 0:
                        await update_requests(user_id, request, request_img - 1)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=message_animation.chat.id,
                                             message_id=message_animation.message_id)

                elif state_ai == 'kandinsky3_0':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    message_animation = await message.answer(random.choice(Metadata.options))

                    media = await media_group_img(message)
                    await bot.send_media_group(user_id, media)

                    if request_img > 0:
                        await update_requests(user_id, request, request_img - 1)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=message_animation.chat.id,
                                             message_id=message_animation.message_id)

                elif state_ai == 'kandinsky2_2':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    message_animation = await message.answer(random.choice(Metadata.options))

                    await kandinsky2_2(message, message.text)

                    if request_img > 0:
                        await update_requests(user_id, request, request_img - 1)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=message_animation.chat.id,
                                             message_id=message_animation.message_id)

            elif request_img == 0:
                await message.answer(
                    '–°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ üõí',
                    reply_markup=inline_submit_preview)
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚úîÔ∏è",
                             reply_markup=inline_markup_reg)
