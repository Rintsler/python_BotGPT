import json
import random
import openai
from aiogram import types
from app.moduls import generate_response, profile
from app.update_keys import get_unused_key
from data.config import bot, chat_id
from data.db_app import add_user, get_flag, new_chat, get_user_history, update_user_history, \
    add_response_to_history, calculate_remaining_tokens, set_state_ai, get_state_ai
from nav.keyboard import inline_markup_reg, menu_keyboard, menu_profile, inline_submit_preview, inline_tp, menu_ai

options = [
    "ü§î –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç —É–º–Ω–∞—è –º–∞—à–∏–Ω–∞...",
    "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è —Ç—É—Ç –∫—Ä—É—á—É—Å—å –∏ –¥—É–º–∞—é...",
    "üåü –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º, —Å–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ—Ç!",
    "üß† –ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è!"
]


async def start_cmd(message: types.Message):
    user_name = message.from_user.first_name
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ". '
        f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ 10000 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.', reply_markup=inline_markup_reg)


async def submit(call: types.CallbackQuery):
    user_id = call.from_user.id
    flag = await get_flag(user_id)
    if flag == 3:
        await bot.edit_message_text(
            '–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.',
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline_submit_preview
        )
        await call.answer(f'–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, '
                          f'–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.', reply_markup=menu_keyboard)
    elif flag == 4:
        await call.answer(f'–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤. '
                          f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.',
                          reply_markup=menu_keyboard)
    elif flag == 5:
        await call.answer(
            f'–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –≥–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.',
            reply_markup=menu_keyboard)
    else:
        await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=inline_submit_preview)


async def tp(call: types.CallbackQuery):
    await bot.edit_message_text(
        '–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...',
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=inline_tp
    )


async def back_to_profile(call: types.CallbackQuery):
    user_id = call.from_user.id
    profile_text = await profile(user_id)
    await bot.edit_message_text(profile_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=menu_profile
                                )


async def check_sub(call: types.CallbackQuery):
    user_id = call.from_user.id
    member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
    print(member)
    if member.status != 'left':
        r_t = await calculate_remaining_tokens(user_id)
        flag = await get_flag(user_id)
        if flag == 0 or flag is None:
            username = call.from_user.username
            flag = 1
            tokens = 10000
            registration_date = call.message.date.strftime('%Y-%m-%d %H:%M:%S')
            await add_user(user_id, username, registration_date, tokens, flag)
            await call.message.answer(
                f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –£ –≤–∞—Å 10000 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤.',
                reply_markup=menu_keyboard)
        else:
            await call.message.answer(
                f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –£ –≤–∞—Å {r_t} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤.',
                reply_markup=menu_keyboard)
    else:
        await call.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª')


async def dalle_2(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'dally2'
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–û–∫! –î–∞–ª—å—à–µ —è –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ üë©‚Äçüé®')


async def dalle_3(call: types.CallbackQuery):
    await call.message.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω...')


async def bot_dialog(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = ''
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–ü–æ–Ω—è–ª! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é.')


async def send_image(message):
    api_key = await get_unused_key()
    print(api_key)
    response = openai.Image.create(
        api_key=api_key,
        prompt=message.text,
        n=1,
        size="1024x1024",
    )
    await message.answer_photo(response["data"][0]["url"])


# ======================================================================================================================
#                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å
# ======================================================================================================================
async def echo(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    flag = await get_flag(user_id)
    r_tokens = await calculate_remaining_tokens(user_id)
    print(r_tokens)
    member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
    print(member)
    if member.status != 'left':
        # ==================================================================================================================
        #                                             –ü—Ä–æ—Ñ–∏–ª—å
        # ==================================================================================================================
        if text in ['üìä –ü—Ä–æ—Ñ–∏–ª—å']:
            profile_text = await profile(user_id)
            await message.answer(profile_text, reply_markup=menu_profile)
        # ==================================================================================================================
        #                                             –ù–µ–π—Ä–æ—Å–µ—Ç—å
        # ==================================================================================================================
        elif text in ['üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å']:
            await message.answer('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É',
                                 reply_markup=menu_ai)
        # ==================================================================================================================
        #                                             –°–æ–∑–¥–∞—Ç—å —á–∞—Ç
        # ==================================================================================================================
        elif text in ['üë• –°–æ–∑–¥–∞—Ç—å —á–∞—Ç']:
            await new_chat(user_id)
            await message.answer("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=menu_keyboard)
        # ==================================================================================================================
        #                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
        # ==================================================================================================================
        else:
            if flag > 0 and r_tokens > 0:
                user_question = message.text
                print(f"User question: {user_question}")
                state_ai = await get_state_ai(user_id)
                if state_ai == 'dalle2':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    processing_message = await message.answer(random.choice(options))
                    await send_image(message)
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)
                    return
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                processing_message = await message.answer(random.choice(options))

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                chat_history, response_history = await get_user_history(user_id)

                chat_history = json.loads(chat_history) if chat_history else []
                response_history = json.loads(response_history) if response_history else []

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
                chat_history.append({"role": "user", "content": user_question})

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await update_user_history(user_id, chat_history, response_history)

                # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞

                response = await generate_response(user_id, chat_history, message)
                print(f"OpenAI response: {response}")

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
                response_history.append({"role": "assistant", "content": response})

                await add_response_to_history(user_id, response_history)

                await message.answer(response, reply_markup=menu_keyboard)

                await calculate_remaining_tokens(user_id)
            elif flag > 1:
                await message.answer("–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –Ω—É–ª–µ, "
                                     "–∂–¥–∏—Ç–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=inline_submit_preview)
            else:
                await message.answer("–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –Ω—É–ª–µ, "
                                     "–∂–¥–∏—Ç–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                                     reply_markup=inline_markup_reg)
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª",
                             reply_markup=inline_markup_reg)
