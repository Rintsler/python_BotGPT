import json

import aiosqlite
import openai
from aiogram import types
from data.bufer import B
from nav.keyboard import menu_keyboard_free, inline_markup_submit, inline_markup_reg, menu_keyboard
from app.moduls import get_subscription_info, generate_response
from app.update_keys import get_unused_key
from data.config import bot
from data.db_app import add_user, reg_user, get_flag, new_chat, get_user_history, update_user_history, \
    add_response_to_history, get_user, calculate_remaining_tokens, get_subscribe

user = B()


async def start_cmd(message: types.Message):
    user.user_id = message.from_user.id
    user_date = await get_user(user.user_id)
    if user_date is None:
        user.username = message.from_user.username
    text = f"–ü—Ä–∏–≤–µ—Ç, {user.username}!\n–Ø –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. " \
           f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."
    if user.flag == 0 or user.flag is None:
        user.tokens = 10000
        user.flag = 1
        await add_user(user.user_id, user.username, user.tokens, user.flag)
        await message.answer(text, reply_markup=menu_keyboard_free)
        await message.answer(
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 10000 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.\n"
            "–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–∞–º –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=inline_markup_reg)
    elif user.flag == 1:
        if user.tokens == 0 or user.tokens is None:
            await message.answer(text, reply_markup=menu_keyboard_free)
            await message.answer(
                f"–í–ù–ò–ú–ê–ù–ò–ï: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.",
                reply_markup=inline_markup_reg)
        else:
            remaining_tokens = await calculate_remaining_tokens(message.from_user.id)
            await message.answer(text, reply_markup=menu_keyboard_free)
            await message.answer(f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {remaining_tokens}.",
                                 reply_markup=inline_markup_reg)
    elif user.flag == 2:
        await message.answer(text, reply_markup=menu_keyboard)
        await message.answer(
            '–í–ù–ò–ú–ê–ù–ò–ï: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.',
            reply_markup=inline_markup_submit)


# ======================================================================================================================
#                                            –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
# ======================================================================================================================
async def registration(call: types.CallbackQuery):
    if user.flag == 2:
        await call.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=menu_keyboard)
    else:
        user.registration_date = call.message.date.strftime('%Y-%m-%d %H:%M:%S')
        user.flag = 2
        await reg_user(user.registration_date, user.flag, user.user_id)
        await call.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=menu_keyboard)
        await call.message.answer("–ú–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=inline_markup_submit)


async def send_image(message):
    api_key = get_unused_key()
    response = openai.Image.create(
        api_key=api_key,
        prompt=message.text,
        n=1,
        size="1024x1024",
    )
    await message.answer_photo(response["data"][0]["url"])


# ======================================================================================================================
#                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å
# ======================================================================================================================
async def echo(message: types.Message):
    user.user_id = message.from_user.id
    text = message.text
    user.flag = await get_flag(user.user_id)
    # ==================================================================================================================
    #                                             –ü–û–î–ü–ò–°–ö–ê
    # ==================================================================================================================
    if text in ['üí∞ –ü–æ–¥–ø–∏—Å–∫–∞']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user.subscribe = await get_subscribe(user.user_id)
        if user.subscribe is not None:
            await message.answer(
                f"–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ {user.subscribe}. –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é üìù –¢–æ–∫–µ–Ω—ã")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=inline_markup_submit)
    # ==================================================================================================================
    #                                             –ü–û–î–ü–ò–°–ö–ê
    # ==================================================================================================================
    elif text in ['‚öôÔ∏è HELP']:
        if user.flag == 2:
            await message.answer(f"–†–∞–∑–¥–µ–ª HELP {user.flag}", reply_markup=menu_keyboard)
        else:
            await message.answer(f"–†–∞–∑–¥–µ–ª HELP {user.flag}", reply_markup=menu_keyboard_free)
    # ==================================================================================================================
    #                                             –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
    # ==================================================================================================================
    elif text in ['üìù –¢–∞—Ä–∏—Ñ—ã']:
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∏:\n–°—Ç–∞—Ä—Ç: 120—Ä - 80—Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤"
                             "\n–ö–æ–º—Ñ–æ—Ä—Ç: 250—Ä - 150—Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤"
                             "\n–ü—Ä–æ—Ñ–∏: 500-600—Ä - 300—Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤", reply_markup=inline_markup_reg)
    # ==================================================================================================================
    #                                             –ü—Ä–æ—Ñ–∏–ª—å
    # ==================================================================================================================
    elif text in ['üìä –ü—Ä–æ—Ñ–∏–ª—å']:
        await get_user(user.user_id)
        subscription_info = await get_subscription_info(user.user_id, user.sub_date)
        if user.registration_date is None:
            user.registration_date = ' '
        if user.balance is None:
            user.balance = ' '
        if user.subscribe is None:
            user.subscribe = ' '

        profile_text = (
            f"\tüìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üë§ –í–∞—à –∞–π–¥–∏: {user.user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {user.subscribe}\n"
            f"üìï –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {subscription_info['remaining_tokens']}\n"
            f"‚è≥ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date}\n"
            f"üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_info['remaining_days']}\n"
        )
        if user.remaining_tokens > 0:
            text_options = f"üìï –û—Å—Ç–∞—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {user.remaining_tokens}\n"
            await message.answer(profile_text + text_options, reply_markup=menu_keyboard)
        else:
            await message.answer(profile_text, reply_markup=menu_keyboard)
    # ==================================================================================================================
    #                                             –¢–æ–∫–µ–Ω—ã
    # ==================================================================================================================
    elif text in ['üìù –¢–æ–∫–µ–Ω—ã']:
        if user.flag == 2 and user.subscribe is not None:
            response_text = (
                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ "{user.subscribe}": {user.tokens}\n'
                f'\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {user.remaining_tokens}\n'
            )
            await message.answer(response_text + "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
                                 reply_markup=inline_markup_submit)
        elif user.flag == 1 and user.tokens != 0:
            response_text = (
                f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: 10000\n'
                f'\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {user.remaining_tokens}'
            )
            await message.answer(response_text, reply_markup=menu_keyboard)
            await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
                                 "–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –¥–ª—è –≤–∞—Å!",
                                 reply_markup=inline_markup_submit)
    # ==================================================================================================================
    #                                             –°–æ–∑–¥–∞—Ç—å —á–∞—Ç
    # ==================================================================================================================
    elif text in ['üë• –°–æ–∑–¥–∞—Ç—å —á–∞—Ç']:
        await new_chat(user.user_id)
        if user.flag == 2:
            await message.answer("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=menu_keyboard)
        else:
            await message.answer("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.",
                                 reply_markup=menu_keyboard_free)
    # ==================================================================================================================
    #                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
    # ==================================================================================================================
    else:
        user_question = message.text
        print(f"User question: {user_question}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
        processing_message = await message.answer("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_history, response_history = await get_user_history(user.user_id)

        chat_history = json.loads(chat_history) if chat_history else []
        response_history = json.loads(response_history) if response_history else []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
        chat_history.append({"role": "user", "content": user_question})

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_user_history(user.user_id, chat_history, response_history)

        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞

        response = await generate_response(user.user_id, chat_history, message)
        print(f"OpenAI response: {response}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI GPT
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        response_history.append({"role": "assistant", "content": response})

        await add_response_to_history(user.user_id, response_history)

        if user.flag == 2:
            await message.answer(response, reply_markup=menu_keyboard)
        else:
            await message.answer(response, reply_markup=menu_keyboard_free)
