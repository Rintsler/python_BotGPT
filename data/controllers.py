import ast
import json
import os
import random
from enum import member
from aiogram.methods.send_media_group import SendMediaGroup
import openai
from aiogram import types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto
from aiogram.utils import media_group
from aiogram.utils.payload import decode_payload
from app.modul_Kandinsky3_0 import send_image_kandinsky
from app.modul_Kandinsky2_2 import kandinsky2_2
from app.moduls import generate_response, profile, counting_pay, Subscribe, calc_sum, ref_menu
from app.update_keys import get_unused_key
from data.config import bot, chat_id
from data.db_app import (reg_user, new_chat, get_user_history, update_user_history,
                         add_response_to_history, set_state_ai, get_state_ai, add_user, update_requests, get_flag,
                         get_req, save_banking_details, get_balans)
from data.metadata import Metadata
from nav.keyboard import (inline_markup_reg, menu_keyboard, menu_profile, inline_submit_preview, inline_tp, menu_ai,
                          menu_profile_ref, inline_back_to_ref)
from aiogram.utils.deep_linking import create_start_link
from aiogram.filters import CommandObject

options = [
    "ü§î –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç —É–º–Ω–∞—è –º–∞—à–∏–Ω–∞...",
    "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è —Ç—É—Ç –∫—Ä—É—á—É—Å—å –∏ –¥—É–º–∞—é...",
    "üåü –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º, —Å–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ—Ç!",
    "üß† –ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è!"
]


async def start_cmd(message: types.Message, command: CommandObject):
    first_name = message.from_user.first_name
    username = message.from_user.username
    user_id = message.from_user.id
    referrer = None

    args = command.args  # –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    if args:
        # –î–µ—à–∏—Ñ—Ä—É–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        referrer = decode_payload(args)
        referrer = int(referrer)

        if int(referrer) != user_id:
            ref_username = await get_username_by_user_id(bot, referrer)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await add_user(user_id, username, referrer, True)

            if ref_username:
                await message.answer(f'–í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä: \nid: {referrer}'
                                     f'\n{ref_username}')
                await message.answer(
                    f'–ü—Ä–∏–≤–µ—Ç, {first_name}! \n\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '
                    f'"–ì–æ—Ç–æ–≤–æ". –í—ã –ø–æ–ª—É—á–∏—Ç–µ 30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Å Izi –∏ 10 '
                    f'–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ üëáüèª',
                    reply_markup=inline_markup_reg)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                image1 = InputMediaPhoto(type='photo', media=FSInputFile(f"res/Kandinsky2_2.jpg"),
                                         caption='–ù–µ–π—Ä–æ—Å–µ—Ç—å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π 2.2\n–ó–∞–ø—Ä–æ—Å: "red cat, 4k photo"')
                image2 = InputMediaPhoto(type='photo', media=FSInputFile(f"res/Kandinsky3_0.jpg"),
                                         caption='–ù–µ–π—Ä–æ—Å–µ—Ç—å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π 3.0\n–ó–∞–ø—Ä–æ—Å: "–ò–∑—è—â–µ—Å—Ç–≤–æ –∏ –∫—Ä–∞—Å–æ—Ç–∞ '
                                                 '–º–æ–≥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –¥–∞–∂–µ –≤ —Å–∞–º—ã—Ö —Å—É—Ä–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ø–µ—Ä–≤–æ–±—ã—Ç–Ω–æ—Å—Ç–∏Color '
                                                 'Grading, Shot on 70mm, Daguerrotype, F/2.8, CRT"')
                media = [image1, image2]

                await bot.send_media_group(user_id, media)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                await bot.send_message(chat_id=referrer, text=f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏: \nid: {user_id}'
                                                              f'\n{username}')
            else:
                await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª.')
        else:
            await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ üòÑ')
    else:
        result = await get_flag(user_id)

        # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º
        if not result:
            await add_user(user_id, username, referrer, False)
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ". '
            '–í—ã –ø–æ–ª—É—á–∏—Ç–µ 30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Å Izi –∏ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.'
            '\n\n –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ üëáüèª',
            reply_markup=inline_markup_reg)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        image1 = InputMediaPhoto(type='photo', media=FSInputFile(f"res/Kandinsky2_2.jpg"),
                                 caption='–ù–µ–π—Ä–æ—Å–µ—Ç—å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π 2.2\n–ó–∞–ø—Ä–æ—Å: "red cat, 4k photo"')
        image2 = InputMediaPhoto(type='photo', media=FSInputFile(f"res/Kandinsky3_0.jpg"),
                                 caption='–ù–µ–π—Ä–æ—Å–µ—Ç—å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π 3.0\n–ó–∞–ø—Ä–æ—Å: "–ò–∑—è—â–µ—Å—Ç–≤–æ –∏ –∫—Ä–∞—Å–æ—Ç–∞ '
                                         '–º–æ–≥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –¥–∞–∂–µ –≤ —Å–∞–º—ã—Ö —Å—É—Ä–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ø–µ—Ä–≤–æ–±—ã—Ç–Ω–æ—Å—Ç–∏Color '
                                         'Grading, Shot on 70mm, Daguerrotype, F/2.8, CRT"')
        media = [image1, image2]

        await bot.send_media_group(user_id, media)


async def get_username_by_user_id(bot: Bot, user_id: int):
    try:
        user = await bot.get_chat_member(chat_id=user_id, user_id=user_id)
        return user.user.username if user.user.username else "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None


# ======================================================================================================================
#                               –ü–æ–¥–ø–∏—Å–∫–∞
# ======================================================================================================================
async def submit(call: types.CallbackQuery):
    user_id = call.from_user.id
    flag = await get_flag(user_id)

    if flag > 1:
        await bot.edit_message_text(
            '–£ –≤–∞—Å –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ',
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline_submit_preview
        )
    else:
        subscribe_text = await Subscribe()
        await bot.edit_message_text(subscribe_text,
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=inline_submit_preview)


# ======================================================================================================================
#                               –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
# ======================================================================================================================
async def Light(call: types.CallbackQuery):
    Metadata.sub_sum = 10000
    Metadata.subscription = 'Light'
    await calc_sum(100)
    Metadata.sub_sum_db = 100
    await bot.edit_message_text('üìù –î–∏–∞–ª–æ–≥ —Å Izi - 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏\n'
                                'üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏\n'
                                '–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ - –ë–∞–∑–æ–≤—ã–π?',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text=f'–ú–µ—Å—è—Ü - {Metadata.sub_sum1} —Ä.',
                                                                 callback_data='month')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'6 –º–µ—Å—è—Ü–µ–≤ - {Metadata.sub_sum2} —Ä.',
                                                                 callback_data='month_6')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'–ì–æ–¥ - {Metadata.sub_sum3} —Ä.',
                                                                 callback_data='year')
                                        ],
                                        [
                                            InlineKeyboardButton(text="‚Üê –Ω–∞–∑–∞–¥", callback_data='back_to_subscriptions')
                                        ]
                                    ],
                                    resize_keyboard=True
                                )
                                )


async def Middle(call: types.CallbackQuery):
    Metadata.sub_sum = 25000
    Metadata.subscription = 'Middle'
    await calc_sum(250)
    Metadata.sub_sum_db = 250
    await bot.edit_message_text('üìù –î–∏–∞–ª–æ–≥ —Å Izi - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üò∫\n'
                                'üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 40 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏\n'
                                '–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π?',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text=f'–ú–µ—Å—è—Ü - {Metadata.sub_sum1} —Ä.',
                                                                 callback_data='month')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'6 –º–µ—Å—è—Ü–µ–≤ - {Metadata.sub_sum2} —Ä.',
                                                                 callback_data='month_6')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'–ì–æ–¥ - {Metadata.sub_sum3} —Ä.',
                                                                 callback_data='year')
                                        ],
                                        [
                                            InlineKeyboardButton(text="‚Üê –Ω–∞–∑–∞–¥", callback_data='back_to_subscriptions')
                                        ]
                                    ],
                                    resize_keyboard=True
                                )
                                )


async def Full(call: types.CallbackQuery):
    Metadata.subscription = 'Premium'
    Metadata.sub_sum = 45000
    await calc_sum(450)
    Metadata.sub_sum_db = 450
    await bot.edit_message_text('‚ôæÔ∏è –ü–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ Izi ü§©\n'
                                '–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ - –ü—Ä–µ–º–∏—É–º?',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text=f'–ú–µ—Å—è—Ü - {Metadata.sub_sum1} —Ä.',
                                                                 callback_data='month')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'6 –º–µ—Å—è—Ü–µ–≤ - {Metadata.sub_sum2} —Ä.',
                                                                 callback_data='month_6')
                                        ],
                                        [
                                            InlineKeyboardButton(text=f'–ì–æ–¥ - {Metadata.sub_sum3} —Ä.',
                                                                 callback_data='year')
                                        ],
                                        [
                                            InlineKeyboardButton(text="‚Üê –Ω–∞–∑–∞–¥", callback_data='back_to_subscriptions')
                                        ]
                                    ],
                                    resize_keyboard=True
                                )
                                )


# ======================================================================================================================
#                               –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤
# ======================================================================================================================
async def back_to_subscriptions(call: types.CallbackQuery):
    subscribe_text = await Subscribe()
    await bot.edit_message_text(subscribe_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_submit_preview)


# ======================================================================================================================
#                               –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
# ======================================================================================================================
async def month(call: types.CallbackQuery):
    await counting_pay(1, call.from_user.id)
    Metadata.sub_period = 1


async def month_6(call: types.CallbackQuery):
    await counting_pay(5, call.from_user.id)
    Metadata.sub_period = 6


async def year(call: types.CallbackQuery):
    await counting_pay(10, call.from_user.id)
    Metadata.sub_period = 12


# ======================================================================================================================
#                               –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
# ======================================================================================================================
async def cancel_payment(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


# ======================================================================================================================
#                               –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
# ======================================================================================================================
async def tp(call: types.CallbackQuery):
    await bot.edit_message_text('–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_tp)


# ======================================================================================================================
#                               –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
# ======================================================================================================================
async def back_to_profile(call: types.CallbackQuery):
    user_id = call.from_user.id
    profile_text = await profile(user_id)
    await bot.edit_message_text(profile_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=menu_profile)


# ======================================================================================================================
#                               –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–∞–Ω–∞–ª–µ
# ======================================================================================================================
async def check_sub(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
    print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–∞–Ω–∞–ª–µ: ', member)
    if member.status != 'left':
        flag = await get_flag(user_id)

        result = await get_req(user_id)
        if result:
            request, request_img = result
        if flag is None or flag == 0:
            flag = 1
            request = 30
            request_img = 10
            registration_date = call.message.date.strftime('%d.%m.%Y')
            await reg_user(user_id, registration_date, request, request_img, flag)
            await call.message.answer(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –£ –≤–∞—Å 30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Å Izi –∏ '
                '10 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ü´∂üèª'
                '–ü–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ '
                '5 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.',
                reply_markup=menu_keyboard)
        elif flag == 1:
            await call.message.answer(
                f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ {request} '
                f'–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∏ {request_img} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ü´∂üèª',
                reply_markup=menu_keyboard)
        else:
            await call.message.answer(
                f'–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ üòâ',
                reply_markup=menu_keyboard)
    else:
        await call.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª', reply_markup=inline_markup_reg)


# ======================================================================================================================
#                               –í—ã–±–æ—Ä –Ω–µ–π—Ä–æ–Ω–∫–∏
# ======================================================================================================================
async def for_kandinsky2_2(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'kandinsky2_2'
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–û–∫! –î–∞–ª—å—à–µ —è –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ üë©‚Äçüé®\n\n'
                              '–§–æ—Ä–º—É–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏\n'
                              '\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ: —á–µ–ª–æ–≤–µ–∫, '
                              '–∂–∏–≤–æ—Ç–Ω–æ–µ, —Å–∫–∞–∑–æ—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –≥–æ—Ä–æ–¥, –ø–µ–π–∑–∞–∂, –∑–¥–∞–Ω–∏–µ, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ '
                              '–ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ, '
                              '—á—Ç–æ —á–µ–º –∏—Ö –±–æ–ª—å—à–µ, —Ç–µ–º –º–µ–Ω–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–Ω–∏ –±—É–¥—É—Ç. –ü—Ä–æ–±—É–π—Ç–µ '
                              '—Å–æ–≤–º–µ—â–∞—Ç—å –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∫–∏–±–µ—Ä–ø–∞–Ω–∫-–≥–æ—Ä–æ–¥¬ª –∏–ª–∏ ¬´–∫–æ—Ç, –ø–æ—Ö–æ–∂–∏–π '
                              '–Ω–∞ –∫–∞—Ä—Ç–∏–Ω—É ‚Äú–ú–æ–Ω–∞ –õ–∏–∑–∞‚Äù¬ª. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —è—Ä–∫–∏–π –∏ –Ω–µ–æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ü–µ–ø—Ç.\n\n'
                              '–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º, –≤ –Ω–µ–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ '
                              '–ø—Ä–µ–¥–º–µ—Ç—ã, –∞ –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è. –¢–∞–∫, –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤ ¬´–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–∞—è –∂–∏–∑–Ω—å¬ª '
                              '–∑–∞–¥–∞–π—Ç–µ ¬´–ø—è—Ç–∏–∑–≤–µ–∑–¥–æ—á–Ω—ã–π –æ—Ç–µ–ª—å –Ω–∞ –¥–∞–ª–µ–∫–æ–π –ø–ª–∞–Ω–µ—Ç–µ¬ª.\n\n'
                              '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞, –≤—ã—Ä–∞–∂–∞—é—â–∏–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ (¬´–Ω–µ¬ª, ¬´–∫—Ä–æ–º–µ¬ª, ¬´–±–µ–∑¬ª, ¬´–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º¬ª, '
                              '¬´–Ω–∏–∫–∞–∫–æ–π¬ª), –∏ –¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã. –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –ø–æ–π–º–µ—Ç –∏—Ö, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ '
                              '–≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º '
                              '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ¬´–∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç¬ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, '
                              '—á—Ç–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç—É—Å–∫–ª—ã–µ —Ü–≤–µ—Ç–∞¬ª, ¬´—Ç–µ–∫—Å—Ç¬ª.\n\n'
                              '–î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏: –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—ä–µ–∫—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç, –≤ –∫–∞–∫–æ–º –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –≥–¥–µ '
                              '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ, —á—Ç–æ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–¥—Ä–µ, –∫–∞–∫–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ, '
                              '–∫–∞–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ù–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–≤—É—à–∫–∞ –∏–∑ –±—É–¥—É—â–µ–≥–æ, '
                              '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç—ã, –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω, –∫—Ä—É–∂–µ–≤–Ω–æ–µ –ø–ª–∞—Ç—å–µ –∏ –¥–æ—Å–ø–µ—Ö–∏, 4K, '
                              '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–≤–µ—Ç, –≥–∏–ø–µ—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å, —Å–≤–µ—Ä—Ö–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, —Ä–µ–∞–ª–∏–∑–º, '
                              '—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å¬ª.\n\n'
                              '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ —Å—Ç–∏–ª—è–º–∏. –í Kandinsky 2.2 –∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–æ ‚Äî –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, '
                              '–∞–Ω–∏–º–µ, –ø–æ–ø-–∞—Ä—Ç–∞ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞ –¥–æ —Ö–æ—Ö–ª–æ–º—ã, —Ü–∏—Ñ—Ä–æ–≤–æ–π –∂–∏–≤–æ–ø–∏—Å–∏ –∏ —Ç. –¥. ')


# ======================================================================================================================
#                               –í—ã–±–æ—Ä –Ω–µ–π—Ä–æ–Ω–∫–∏
# ======================================================================================================================
async def kandinsky3_0(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'kandinsky3_0'
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–û–∫! –î–∞–ª—å—à–µ —è –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ üë©‚Äçüé®\n\n'
                              '–§–æ—Ä–º—É–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏\n'
                              '\n- –û–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: '
                              '–¥–µ–≤—É—à–∫–∞, —Ä–µ–±–µ–Ω–æ–∫, –∫–æ—Ç, –∂–∏—Ä–∞—Ñ, –º–∞—à–∏–Ω–∞, —è–±–ª–æ–∫–æ, –±–∞—à–Ω—è –∏ —Ç.–¥.'
                              '\n- –ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å—É: –∫–∞–∫–∞—è –æ–¥–µ–∂–¥–∞, '
                              '–∫—É–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç, –ø–æ–∑–∞, —Ü–≤–µ—Ç –∏ —Ç.–¥.'
                              '\n- –î–∞–ª–µ–µ –¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≥–¥–µ –Ω–∞—à –æ–±—ä–µ–∫—Ç, –∫–∞–∫–æ–π —É –Ω–µ–≥–æ —Ñ–æ–Ω: '
                              '–º–æ—Ä–µ, –≥–æ—Ä–æ–¥, –≥–æ—Ä—ã, –∫–∞–±–∏–Ω–µ—Ç, –±–µ–∑ —Ñ–æ–Ω–∞'
                              '\n- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ø–æ–ø-–∞—Ä—Ç, —Ç–µ—Ö–Ω–æ-–º–∏—Å—Ç–∏–∫–∞, –±–∞—Ä–æ–∫–∫–æ –∏ —Ç.–¥. '
                              '\n- –ï—Å–ª–∏ —Å—Ç–∏–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, —Ç–æ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å–µ.\n\n'
                              '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ç–æ –¥–æ–ø–∏—à–∏: 4K, '
                              '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–≤–µ—Ç, –≥–∏–ø–µ—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å, —Å–≤–µ—Ä—Ö–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, '
                              '—Ä–µ–∞–ª–∏–∑–º, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å')


async def delle_2(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'delle2'
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–û–∫! –î–∞–ª—å—à–µ —è –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ üë©‚Äçüé®\n\n'
                              '–î–ª—è —ç—Ç–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, '
                              '–Ω–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Ç–æ–∂–µ –¥–æ–ø—É—Å—Ç–∏–º. '
                              '\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã, '
                              '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —á—ë—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π –∫–∞–¥—Ä, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π. '
                              '–í —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏—Ç –≤–ø–∏—Å–∞—Ç—å —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç, '
                              '–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∞–∫–≤–∞—Ä–µ–ª—å—é, –∫–∞—Ä–∞–Ω–¥–∞—à–Ω—ã–π –Ω–∞–±—Ä–æ—Å–æ–∫ –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ.\n\n'
                              '–¢–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Å–≤–µ—â–µ–Ω–∏—è –≤ –∫–∞–¥—Ä–µ –∏ —Å—Ç–∏–ª—å. –î–æ–ø—É—Å—Ç–∏–º, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, '
                              '–∫–∞–∫ –≤ –∫–æ–º–∏–∫—Å–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∞–Ω–µ—Ä—É –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞. –î–æ–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ '
                              '–ø—Ä–∏–º–µ—Ä–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —è—Ä–∫–æ—Å—Ç–∏.\n\n'
                              '–í –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –∫–∞–¥—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç '
                              '–Ω–µ —Ç–æ–ª—å–∫–æ –ª—É–Ω–æ—Ö–æ–¥, –Ω–æ –∏ –º–æ–º–µ–Ω—Ç, –∫–∞–∫ —Ç–æ—Ç –¥–≤–∏–∂–µ—Ç—Å—è –Ω–∞ —Ñ–æ–Ω–µ –ó–µ–º–ª–∏. –ò–ª–∏ —Å—Ü–µ–Ω—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π '
                              '–ø–ª—é—à–µ–≤—ã–µ –∑–∞–π—Ü—ã —Å—Ä–∞–∂–∞—é—Ç—Å—è —Å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∞–º–∏.')


async def delle_3(call: types.CallbackQuery):
    await call.message.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω ‚è≥')


async def bot_dialog(call: types.CallbackQuery):
    user_id = call.from_user.id
    state_ai = 'gpt'
    await set_state_ai(user_id, state_ai)
    await call.message.answer('–ü–æ–Ω—è–ª! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é.')


# ======================================================================================================================
#                               –ó–∞–ø—Ä–æ—Å Delle 2
# ======================================================================================================================
async def send_image(message):
    api_key = await get_unused_key()
    print(api_key)
    response = openai.Image.create(
        api_key=api_key,
        prompt=message.text,
        n=1,
        size="1024x1024",
    )
    await message.answer_photo(response["data"][0]["url"])


# ======================================================================================================================
#                                             –†–µ—Ñ —Å—Å—ã–ª–∫–∞
# ======================================================================================================================
async def get_ref(call: types.CallbackQuery):
    link = await create_start_link(bot, str(call.from_user.id), encode=True)
    await bot.edit_message_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
                                f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å üí≤. "
                                f"üéÅ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 10% —Å –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã "
                                f"—Ç–∞—Ä–∏—Ñ–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                                f"üí∞ –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n"
                                f"–ö–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å:\n"
                                f"‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
                                f"‚Ä¢ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É (–≤ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–µ "
                                f"–¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üí≥)",
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_back_to_ref)


# ======================================================================================================================
#                                             –ú–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏
# ======================================================================================================================
async def ref_program(call: types.CallbackQuery):
    ref_text = await ref_menu()
    await bot.edit_message_text(ref_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=menu_profile_ref)


async def requisites(call: types.CallbackQuery):
    await set_state_ai(call.from_user.id, '–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞')
    await bot.edit_message_text('–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à –±–æ–Ω—É—Å.\n'
                                '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –°–ë–ü).'
                                '–î–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º (–ø—Ä–∏–º–µ—Ä: +79991112244 '
                                '—Å–±–µ—Ä–±–∞–Ω–∫ –ò–≤–∞–Ω–æ–≤ –ò.–ò.)',
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_back_to_ref)


async def get_the_money(call: types.CallbackQuery):
    await set_state_ai(call.from_user.id, '–û–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞')
    balans = await get_balans(call.from_user.id)
    await bot.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balans}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞",
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=inline_back_to_ref)


# ======================================================================================================================
#                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å
# ======================================================================================================================
async def echo(message: types.Message):
    user_id = message.from_user.id
    member_check = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ\n"
          f"–°—Ç–∞—Ç—É—Å: {member_check.status}\n"
          f"ID: {member_check.user.id}\n"
          f"username: {member_check.user.username}\n"
          f"first_name: {member_check.user.first_name}\n"
          f"is_bot: {member_check.user.is_bot}\n")

    if member_check.status != 'left':
        text = message.text
        result = await get_req(user_id)
        if result:
            request, request_img = result
        # ==================================================================================================================
        #                                             –ü—Ä–æ—Ñ–∏–ª—å
        # ==================================================================================================================
        if text in ['üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']:
            profile_text = await profile(user_id)
            await message.answer(profile_text, reply_markup=menu_profile)
        # ==================================================================================================================
        #                                             –ù–µ–π—Ä–æ—Å–µ—Ç—å
        # ==================================================================================================================
        elif text in ['üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å']:
            await message.answer('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É',
                                 reply_markup=menu_ai)
        # ==================================================================================================================
        #                                             –°–æ–∑–¥–∞—Ç—å —á–∞—Ç
        # ==================================================================================================================
        elif text in ['–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å IZI']:
            await new_chat(user_id)
            await set_state_ai(user_id, 'gpt')
            await message.answer("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=menu_keyboard)
        # ==================================================================================================================
        #                                             –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
        # ==================================================================================================================
        else:
            state_ai = await get_state_ai(user_id)

            if state_ai == '–û–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞':
                text_request = await profile(user_id, 1)
                balans = await get_balans(user_id)
                if balans == 0:
                    await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å, –≤–∞—à –±–∞–ª–∞–Ω—Å: {balans}",
                                         reply_markup=inline_back_to_ref)
                if balans >= int(text):
                    await bot.send_message(6280608864, f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±–æ–Ω—É—Å–∞:\n\n{text_request}\n\n'
                                                       f'–ù–∞ —Å—É–º–º—É: {text}')
                    await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±–æ–Ω—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, "
                                         f"—Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è.",
                                         reply_markup=inline_back_to_ref)
                else:
                    await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É, –≤–∞—à –±–∞–ª–∞–Ω—Å: {balans}",
                                         reply_markup=inline_back_to_ref)
                await set_state_ai(user_id, 'gpt')

            elif state_ai == '–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞':
                await save_banking_details(user_id, text)
                await message.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–æ–Ω—É—Å–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {text}",
                                     reply_markup=inline_back_to_ref)
                await set_state_ai(user_id, 'gpt')

            elif state_ai == 'gpt':
                if request != 0:
                    user_question = message.text
                    print(f"User question: {user_question}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    processing_message = await message.answer(random.choice(options))

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    chat_history, response_history = await get_user_history(user_id)

                    chat_history = json.loads(chat_history) if chat_history else []
                    response_history = json.loads(response_history) if response_history else []

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
                    chat_history.append({"role": "user", "content": user_question})

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await update_user_history(user_id, chat_history, response_history)

                    # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞

                    response = await generate_response(user_id, chat_history, message, request, request_img)
                    print(f"OpenAI response: {response}")

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=processing_message.chat.id,
                                             message_id=processing_message.message_id)

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
                    response_history.append({"role": "assistant", "content": response})

                    await add_response_to_history(user_id, response_history)

                    await message.answer(str(response), reply_markup=menu_keyboard)
                else:
                    await message.answer('–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ Izi –∏—Å—á–µ—Ä–ø–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ üõí',
                                         reply_markup=inline_submit_preview)
            elif request_img != 0:
                if state_ai == 'delle2':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    message_animation = await message.answer(random.choice(options))

                    await send_image(message)

                    if request_img > 0:
                        await update_requests(user_id, request, request_img - 1)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=message_animation.chat.id,
                                             message_id=message_animation.message_id)

                elif state_ai == 'kandinsky3_0':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    message_animation = await message.answer(random.choice(options))

                    styles = ["KANDINSKY", "UHD", "ANIME", "DEFAULT"]
                    for style in styles:
                        await send_image_kandinsky(message, message.text, style)
                        FSInputFile(f"image_Kandinsky3_0/{message.from_user.id}+{style}.jpg")

                    image1 = InputMediaPhoto(type='photo', media=FSInputFile(
                        f"image_Kandinsky3_0/{message.from_user.id}+KANDINSKY.jpg"), caption='–°—Ç–∏–ª—å: KANDINSKY')
                    image2 = InputMediaPhoto(type='photo', media=FSInputFile(
                        f"image_Kandinsky3_0/{message.from_user.id}+UHD.jpg"), caption='–°—Ç–∏–ª—å: UHD')
                    image3 = InputMediaPhoto(type='photo', media=FSInputFile(
                        f"image_Kandinsky3_0/{message.from_user.id}+ANIME.jpg"), caption='–°—Ç–∏–ª—å: ANIME')
                    image4 = InputMediaPhoto(type='photo', media=FSInputFile(
                        f"image_Kandinsky3_0/{message.from_user.id}+DEFAULT.jpg"), caption='–°—Ç–∏–ª—å: DEFAULT')

                    media = [image1, image2, image3, image4]

                    await bot.send_media_group(user_id, media)

                    if request_img > 0:
                        await update_requests(user_id, request, request_img - 1)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=message_animation.chat.id,
                                             message_id=message_animation.message_id)

                elif state_ai == 'kandinsky2_2':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenAI GPT
                    message_animation = await message.answer(random.choice(options))

                    await kandinsky2_2(message, message.text)

                    if request_img > 0:
                        await update_requests(user_id, request, request_img - 1)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    await bot.delete_message(chat_id=message_animation.chat.id,
                                             message_id=message_animation.message_id)
            elif request_img == 0:
                await message.answer(
                    '–°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ üõí',
                    reply_markup=inline_submit_preview)
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚úîÔ∏è",
                             reply_markup=inline_markup_reg)
