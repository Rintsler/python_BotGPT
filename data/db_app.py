import asyncio
import json
import traceback
import aiosqlite
from datetime import datetime

from data.config import bot


async def create_table():
    async with aiosqlite.connect('Users.db') as db:
        cursor = await db.cursor()
        await cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                state_ai TEXT,
                user_id INTEGER,
                flag INTEGER,
                username TEXT,
                registration_date DATETIME,
                chat_history TEXT NULL DEFAULT '[]',
                response_history TEXT NULL DEFAULT '[]',
                request INTEGER,
                request_img INTEGER,
                period_sub INTEGER,
                sub_date DATETIME,
                remaining_days INTEGER
            )
        ''')

        await db.commit()


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_info_key_table():
    async with aiosqlite.connect('Users.db') as db:
        cursor = await db.cursor()
        await cursor.execute('''
            CREATE TABLE IF NOT EXISTS info_key (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                api_key TEXT NOT NULL,
                status_key INTEGER,
                status_limits INTEGER,
                requests_key INTEGER,
                requests_day_key INTEGER,
                cost INTEGER,
                where_use TEXT,
                status_change DATETIME DEFAULT CURRENT_TIMESTAMP,
                status_error TEXT,
                login TEXT,
                password TEXT
            )
        ''')
        await db.commit()


async def update_tariffs_sub():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect('Users.db') as connection:
        cursor = await connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.strftime(datetime.now(), '%Y-%m-%d %H:%M')

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await cursor.execute('SELECT user_id, period_sub, sub_date FROM users WHERE flag > 2')

        rows = await cursor.fetchall()
        print(rows)

        print("–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É")
        for row in rows:
            user_id, period_sub, sub_date = row
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ sub_date –Ω–µ —è–≤–ª—è–µ—Ç—Å—è None –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
            if sub_date:
                sub_date = datetime.strptime(sub_date, '%Y-%m-%d %H:%M')
                # –£–≤–µ–ª–∏—á–∏—Ç—å sub_date –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü
                sub_date_month = sub_date.replace(month=(sub_date.month + 1) % 12 + 1)
                date_send_m_month = sub_date_month.replace(day=sub_date_month.day - 4)

                sub_date_month = datetime.strftime(sub_date_month, '%Y-%m-%d')
                date_send_m_month = datetime.strftime(date_send_m_month, '%Y-%m-%d')

                # –£–≤–µ–ª–∏—á–∏—Ç—å sub_date –Ω–∞ –ø–æ–ª –≥–æ–¥–∞
                if sub_date.month + 6 <= 12:
                    sub_date_6m = sub_date.replace(month=sub_date.month + 6)
                else:
                    sub_date_6m = sub_date.replace(year=sub_date.year + 1, month=(sub_date.month + 6) % 12,
                                                   day=sub_date.day)
                date_send_m_6m = sub_date_6m.replace(day=sub_date_6m.day - 4)

                sub_date_6m = datetime.strftime(sub_date_6m, '%Y-%m-%d')
                date_send_m_6m = datetime.strftime(date_send_m_6m, '%Y-%m-%d')

                # –£–≤–µ–ª–∏—á–∏—Ç—å sub_date –Ω–∞ –æ–¥–∏–Ω –≥–æ–¥
                sub_date_year = sub_date.replace(year=sub_date.year + 1)
                date_send_m_year = sub_date_year.replace(day=sub_date_year.day - 4)

                sub_date_year = datetime.strftime(sub_date_year, '%Y-%m-%d')
                date_send_m_year = datetime.strftime(date_send_m_year, '%Y-%m-%d')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if period_sub == 1:
                    if current_date >= sub_date_month:
                        await cursor.execute('UPDATE users SET flag = 2, sub_date = ? WHERE user_id = ?',
                                             ('', user_id))
                    elif current_date > date_send_m_month:
                        await bot.send_message(chat_id=user_id,
                                               text=f'–î–µ–π—Å—Ç–≤–∏–µ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è {sub_date_month} üò±')
                elif period_sub == 6:
                    print("–¥–∞—Ç–∞", sub_date_6m)
                    if current_date >= sub_date_6m:
                        await cursor.execute('UPDATE users SET flag = 2, sub_date = ? WHERE user_id = ?',
                                             ('', user_id))
                    elif current_date > date_send_m_6m:
                        await bot.send_message(chat_id=user_id,
                                               text=f'–î–µ–π—Å—Ç–≤–∏–µ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è {sub_date_6m} üò±')
                elif period_sub == 12:
                    print(period_sub)
                    print(current_date, '==', sub_date_year)
                    if current_date >= sub_date_year:
                        await cursor.execute('UPDATE users SET flag = 2, sub_date = ? WHERE user_id = ?',
                                             ('', user_id))
                    elif current_date > date_send_m_year:
                        await bot.send_message(chat_id=user_id,
                                               text=f'–î–µ–π—Å—Ç–≤–∏–µ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è {sub_date_year} üò±')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await connection.commit()
    print("–û–±–Ω–æ–≤–∏–ª –ø–æ–¥–ø–∏—Å–∫–∏")


async def update_requests_db():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect('Users.db') as connection:
        cursor = await connection.cursor()

        await cursor.execute('SELECT user_id , request_img, request FROM users WHERE flag == 1')
        rows = await cursor.fetchall()

        print("–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É")
        for row in rows:
            user_id, request_img, request = row
            if request < 15:
                await cursor.execute('UPDATE users SET request = ? WHERE user_id = ?', (15, user_id))
            if request_img < 5:
                await cursor.execute('UPDATE users SET request_img = ? WHERE user_id = ?', (5, user_id))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await connection.commit()
    print("–û–±–Ω–æ–≤–∏–ª –ª–∏–º–∏—Ç—ã")


async def scheduler():
    while True:
        await update_tariffs_sub()
        await update_requests_db()
        await asyncio.sleep(86400)


async def set_state_ai(user_id, state_ai):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users
                                SET state_ai = ?
                                WHERE user_id = ?
                            ''', (state_ai, user_id))
            await db.commit()
    except Exception as e:
        print(f"Error updating state_ai: {e}")


async def get_state_ai(user_id):
    try:
        async with aiosqlite.connect('Users.db') as db:
            cursor = await db.execute('''
                                        SELECT state_ai
                                        FROM users
                                        WHERE user_id = ?
                                        ''', (user_id,))
            result = await cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ get_state_ai: {e}")
        return None


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def reg_user(user_id, username, registration_date, request, request_img, flag):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users 
                                SET user_id = ?, username = ?, registration_date = ?, 
                                request = ?, request_img = ?, flag = ?
                                WHERE user_id = ?
                            ''', (user_id, username, registration_date, request, request_img, flag, user_id))
            await db.commit()
    except Exception as e:
        print(f"Error reg user: {e}")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø–æ—Å–ª–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö 30/10
async def update_flag_requests_img(user_id, flag):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users 
                                SET user_id = ?, flag = ?
                                WHERE user_id = ?
                            ''', (user_id, flag, user_id))
            await db.commit()
    except Exception as e:
        print(f"Error reg user: {e}")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø–æ—Å–ª–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö 30/10
async def update_flag_requests(user_id, flag):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users 
                                SET user_id = ?, flag = ?
                                WHERE user_id = ?
                            ''', (user_id, flag, user_id))
            await db.commit()
    except Exception as e:
        print(f"Error reg user: {e}")


async def add_user(user_id, username):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                INSERT INTO users (user_id, username)
                                VALUES (?, ?)
                            ''', (user_id, username))
            await db.commit()
    except Exception as e:
        print(f"Error add user: {e}")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def update_subscribe(flag, sub_date, request, request_img, period, user_id):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users
                                SET flag = ?,
                                sub_date = ?,
                                request = ?, 
                                request_img = ?,
                                period_sub = ?
                                WHERE user_id = ?
                            ''', (flag, sub_date, request, request_img, period, user_id))
            await db.commit()
    except Exception as e:
        print(f"Error updating user: {e}")


async def new_chat(user_id):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users
                                SET chat_history = ?,
                                response_history = ?
                                WHERE user_id = ?
                                ''', ('[]', '[]', user_id))  # –û–±–Ω—É–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            await db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")


async def get_flag_and_req(user_id):
    try:
        async with aiosqlite.connect('Users.db') as db:
            cursor = await db.execute('''
                                        SELECT flag, request, request_img FROM users WHERE user_id = ?
                                        ''', (user_id,))
            result = await cursor.fetchone()
            return result
    except Exception as e:
        print(f"–ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ –∏–∑ –ë–î –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {e}")
        return None


async def get_user_history(user_id):
    try:
        async with aiosqlite.connect('Users.db') as db:
            cursor = await db.execute('''
                                        SELECT chat_history, response_history FROM users WHERE user_id = ?
                                        ''', (user_id,))
            result = await cursor.fetchone()
            if result is not None:
                chat_history, response_history = result
                return chat_history, response_history
            else:
                return [], []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        return None


async def update_user_history(user_id, user_history, response_history):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users
                                SET chat_history = ?,
                                    response_history = ?
                                WHERE user_id = ?
                            ''', (
                json.dumps(user_history, ensure_ascii=False), json.dumps(response_history, ensure_ascii=False),
                user_id))
            await db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        traceback.print_exc()
        return None


async def add_response_to_history(user_id, response_history):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users
                                SET response_history = ?
                                WHERE user_id = ?
                                ''', (json.dumps(response_history, ensure_ascii=False), user_id))
            await db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return None


async def update_requests(user_id, request, request_img):
    try:
        async with aiosqlite.connect('Users.db') as db:
            await db.execute('''
                                UPDATE users
                                SET request = ?,
                                request_img = ?
                                WHERE user_id = ?
                                ''', (request, request_img, user_id))
            await db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ calculate_remaining_tokens: {e}")
        return None


async def get_user_data(user_id):
    try:
        async with aiosqlite.connect('Users.db') as db:
            cursor = await db.execute('''
                                        SELECT *
                                        FROM users
                                        WHERE user_id = ?
                                        ''', (user_id,))
            result = await cursor.fetchone()
            return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ calculate_remaining_tokens: {e}")
        return None
