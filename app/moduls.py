import traceback
import openai
from aiogram.types import LabeledPrice
from app.update_keys import get_unused_key, update_key_status, reset_key_status, log_error, set_key_status_to_2
from data.config import bot, YOOTOKEN, admins_id
from data.db_app import get_user_data, update_requests, sum_balans
from data.metadata import Metadata
from nav.keyboard import inline_kb_pay
import asyncio


async def generate_response(user_id, chat_history, message, request, request_img):
    api_key = await get_unused_key()
    while not api_key:
        print("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
        await asyncio.sleep(10)
        api_key = await get_unused_key()
    try:
        await update_key_status(api_key, 1)

        system_message = {"role": "system", "content": "You are a helpful assistant"}
        messages = [system_message] + chat_history[-5:]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-16k",
            api_key=api_key,
            messages=messages,
            temperature=0.8,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        otvet = response['choices'][0]['message']['content'].strip()
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã request, request_img –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        if request > 0:
            await update_requests(user_id, request - 1, request_img)
        await reset_key_status(api_key)
        return otvet
    except (openai.error.RateLimitError, openai.error.Timeout) as e:
        error_text = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ RateLimit: {e}")
        await log_error(api_key, error_text)
        return await handle_rate_limit_error(user_id, api_key, chat_history, message, request, request_img)


async def handle_rate_limit_error(user_id, api_key, chat_history, message, request, request_img):
    await set_key_status_to_2(api_key)
    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑")
    api_key = await get_unused_key()
    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑2")
    while not api_key:
        # print("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
        await asyncio.sleep(10)
        api_key = await get_unused_key()
    try:
        await update_key_status(api_key, 1)
        print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑3")
        system_message = {"role": "system", "content": "You are a helpful assistant"}
        messages = [system_message] + chat_history[-5:]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            api_key=api_key,
            messages=messages,
            temperature=0.8,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        otvet = response['choices'][0]['message']['content'].strip()
        print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü tokens_used –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_requests(user_id, request, request_img)
        await reset_key_status(api_key)
        return otvet
    except (openai.error.RateLimitError, openai.error.Timeout) as e:
        error_text = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ RateLimit: {e}")
        await log_error(api_key, error_text)
        return await handle_rate_limit_error(user_id, api_key, chat_history, message, request, request_img)


async def profile(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_data
    (pk, state_ai, user_id, flag, username, registration_date, chat_history,
     response_history, request, request_img, period_sub, sub_date, sub_date_end,
     remaining_days, referrer, referrals, last_amount, sum_amount, balans) = await get_user_data(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    string_period = f'{sub_date} - {sub_date_end}\n\n' if sub_date_end is not None else '\n\n'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º referrals
    string_referrals = f'{referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)\n\n' if referrals is not None else '\n\n'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º remaining_days
    string_remaining_days = f'{remaining_days} –¥–Ω—è(–µ–π)\n\n' if remaining_days is not None else '\n\n'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º balans
    string_balans = f'{balans} —Ä—É–±.' if balans is not None else ''

    request = '–ë–µ–∑–ª–∏–º–∏—Ç' if request < 0 else request
    request_img = '–ë–µ–∑–ª–∏–º–∏—Ç' if request_img < 0 else request_img

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    subscribe = {
        2: "–ë–∞–∑–æ–≤—ã–π",
        3: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
        4: "–ü—Ä–µ–º–∏—É–º"
    }.get(flag, '')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        "<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üë§ –í–∞—à ID: {user_id}\n\n"
        f"üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n"
        "<b>–¢–∞—Ä–∏—Ñ:</b>\n"
        f"  ‚Ä¢ –¢–∏–ø: {subscribe}\n"
        f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: {string_period}"
        "<b>–°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç:</b>\n\n"
        f"üìù –ó–∞–ø—Ä–æ—Å—ã: {request}\n\n"
        f"üèû –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request_img}\n\n"
        f"üìÜ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {string_remaining_days}"
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n\n"
        f"ü§ù –í—ã –ø—Ä–∏–≤–µ–ª–∏: {string_referrals}"
        f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π\n–ø—Ä–æ–≥—Ä–∞–º–º–µ: {string_balans}"
    )
    string_sum_balans = await sum_balans()

    profile_text = (
        profile_text +
        f"\n\n\nüí≥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: "
        f"{string_sum_balans}" if user_id == admins_id[0] or user_id == admins_id[1] else profile_text)

    return profile_text

    # subscribe = ''
    # (pk, state_ai, user_id, flag, username, registration_date, chat_history,
    #  response_history, request, request_img, period_sub, sub_date, sub_date_end,
    #  remaining_days, referrer, referrals, last_amount, sum_amount, balans) = await get_user_data(user_id)
    #
    # user_info = [pk, user_id, flag, username, registration_date, chat_history,
    #              response_history, request, request_img, period_sub, sub_date,
    #              sub_date_end, remaining_days, referrer, referrals, last_amount,
    #              sum_amount, balans]
    # string_period = f'{sub_date} - {sub_date_end}\n\n'
    # if sub_date_end is not None:
    #     remaining_days = await calculate_remaining_days(sub_date_end)
    # else:
    #     remaining_days = ''
    #
    # for i in user_info:
    #     if i is None:
    #         i = ''
    # if flag == 2:
    #     subscribe = "–ë–∞–∑–æ–≤—ã–π"
    # elif flag == 3:
    #     subscribe = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"
    # elif flag == 4:
    #     subscribe = "–ü—Ä–µ–º–∏—É–º"
    # else:
    #     subscribe = ''
    #     string_period = ''
    #
    # profile_text = (
    #     "üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
    #     f"üë§ –í–∞—à ID: {user_id}\n\n"
    #     f"üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n\n"
    #     f"üíº –¢–∞—Ä–∏—Ñ: {subscribe}\n\n"
    #     f"‚è≥ –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: {string_period}\n\n\n"
    #     f"–°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç\n\n"
    #     f"üìù –ó–∞–ø—Ä–æ—Å—ã: {request}\n\n"
    #     f"üèû –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request_img}\n\n"
    #     f"‚è≤ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ : {remaining_days} –¥–Ω—è(–µ–π)\n\n"
    #     f"‚è≤ –í—ã –ø—Ä–∏–≤–µ–ª–∏: {referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)\n"
    #     f"‚è≤ –ë–∞–ª–∞–Ω—Å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: {balans}\n"
    # )
    # return profile_text


async def Subscribe():
    subscribe_text = (
        '–•–æ—á–µ—à—å –¥–∞–ª—å—à–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º Izi, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–±–µ —Ç–∞—Ä–∏—Ñ üëá\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –ë–∞–∑–æ–≤—ã–π:'
        '\n35 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - –Ω–∞ –æ—Ç–≤–µ—Ç—ã Izi –≤ —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'
        '\n15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - Izi —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π:'
        '\n–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –æ—Ç–≤–µ—Ç—ã Izi –≤ —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'
        '\n40 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - Izi —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –ü—Ä–µ–º–∏—É–º:'
        '\n–ü–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –≤—Å–µ üòã\n\n'
        '‚ò∫Ô∏è–ö–∞–∂–¥—ã–π —Ç–∞—Ä–∏—Ñ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã üóì'
    )
    return subscribe_text


async def calc_sum(sub_sum):
    Metadata.sub_sum1 = sub_sum * 1
    Metadata.sub_sum2 = sub_sum * 5
    Metadata.sub_sum3 = sub_sum * 10


async def counting_pay(factor, user_id):
    sub_sum = Metadata.sub_sum * factor
    Metadata.sub_sum_db = Metadata.sub_sum_db * factor

    description = ''
    if Metadata.subscription == 'Light':
        description = Metadata.description_Light
    elif Metadata.subscription == 'Middle':
        description = Metadata.description_Middle
    elif Metadata.subscription == 'Premium':
        description = Metadata.description_Premium

    await bot.send_invoice(
        chat_id=user_id,
        title='–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∫ –æ–ø–ª–∞—Ç–µ',
        description='–¢–∞—Ä–∏—Ñ',
        payload='month_sub',
        provider_token=YOOTOKEN,
        currency='RUB',
        prices=[LabeledPrice(label='–¢–∞—Ä–∏—Ñ ' + Metadata.subscription + '\n' + description, amount=sub_sum)],
        max_tip_amount=1000000,
        suggested_tip_amounts=[5000, 10000, 15000, 20000],
        start_parameter='Izi_bot',
        provider_data=None,
        # photo_url='https://i.ibb.co/zGw5X0B/image.jpg',
        # photo_size=100,
        # photo_width=800,
        # photo_height=450,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=False,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=inline_kb_pay,
        request_timeout=15
    )
