import datetime
import time
import traceback
import openai
from aiogram.types import LabeledPrice
from app.update_keys import get_unused_key, update_key_status, reset_key_status, log_error, set_key_status_to_2
from data.config import bot, YOOTOKEN
from data.db_app import get_user_data, update_requests
from data.metadata import Metadata
from nav.keyboard import inline_kb_pay
import sqlite3
import asyncio
from datetime import datetime, timedelta


async def update_tariffs_sub():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT id, sub_date, period_sub, flag FROM users WHERE flag > 1')

    rows = cursor.fetchall()
    print("–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É")
    for row in rows:
        user_id, sub_date, period_sub, flag = row

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ sub_date –Ω–µ —è–≤–ª—è–µ—Ç—Å—è None –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
        if sub_date:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç datetime —Å —É—á–µ—Ç–æ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            sub_date = datetime.strptime(sub_date, '%Y-%m-%d %H:%M')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if flag > 1:
                if period_sub == 1:
                    if (current_date - sub_date).days > 30:
                        cursor.execute('UPDATE users SET flag = 1, sub_date = ? WHERE id = ?', ('', user_id))
                elif period_sub == 6:
                    if (current_date - sub_date).days > 180:
                        cursor.execute('UPDATE users SET flag = 1, sub_date = ? WHERE id = ?', ('', user_id))
                elif period_sub == 12:
                    if (current_date - sub_date).days > 364:
                        cursor.execute('UPDATE users SET flag = 1, sub_date = ? WHERE id = ?', ('', user_id))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    print("–û–±–Ω–æ–≤–∏–ª –ø–æ–¥–ø–∏—Å–∫–∏")
    connection.commit()
    connection.close()


async def scheduler():
    while True:
        await update_tariffs_sub()
        await asyncio.sleep(86400)


async def calculate_remaining_days(sub_date, flag):
    try:
        db_datetime = datetime.strptime(sub_date, "%Y-%m-%d %H:%M")
        current_date = datetime.now()
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        if flag == 2:
            remaining_days = (db_datetime + timedelta(days=30)) - current_date
            return max(remaining_days.days, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0
        if flag == 3:
            remaining_days = (db_datetime + timedelta(days=180)) - current_date
            return max(remaining_days.days, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0
        if flag == 4:
            remaining_days = (db_datetime + timedelta(days=365)) - current_date
            return max(remaining_days.days, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
        return None


async def generate_response(user_id, chat_history, message, request, request_img):
    api_key = await get_unused_key()
    while not api_key:
        print("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
        await asyncio.sleep(10)
        api_key = await get_unused_key()
    try:
        await update_key_status(api_key, 1)

        system_message = {"role": "system", "content": "You are a helpful assistant"}
        messages = [system_message] + chat_history[-5:]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-16k",
            api_key=api_key,
            messages=messages,
            temperature=0.8,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        otvet = response['choices'][0]['message']['content'].strip()
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã request, request_img –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await update_requests(user_id, request - 1, request_img)
        await reset_key_status(api_key)
        return otvet
    except (openai.error.RateLimitError, openai.error.Timeout) as e:
        error_text = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ RateLimit: {e}")
        await log_error(api_key, error_text)
        return handle_rate_limit_error(user_id, api_key, chat_history, message)


async def handle_rate_limit_error(user_id, api_key, chat_history, message, request, request_img):
    await set_key_status_to_2(api_key)
    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑")
    api_key = await get_unused_key()
    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑2")
    while not api_key:
        # print("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
        await asyncio.sleep(10)
        api_key = await get_unused_key()
    try:
        await update_key_status(api_key, 1)
        print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑3")
        system_message = {"role": "system", "content": "You are a helpful assistant"}
        messages = [system_message] + chat_history[-5:]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            api_key=api_key,
            messages=messages,
            temperature=0.8,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        otvet = response['choices'][0]['message']['content'].strip()
        print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü tokens_used –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_requests(user_id, request, request_img)
        await reset_key_status(api_key)
        return otvet
    except (openai.error.RateLimitError, openai.error.Timeout) as e:
        error_text = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ RateLimit: {e}")
        await log_error(api_key, error_text)
        return handle_rate_limit_error(user_id, api_key, chat_history, message)


async def profile(user_id):
    subscribe = period = ''
    pk, state_ai, user_id, flag, username, registration_date, chat_history, response_history, request, request_img, \
        period_sub, sub_date, remaining_days = await get_user_data(user_id)
    user_info = [pk, user_id, flag, username, registration_date, chat_history, response_history, request, request_img,
                 period_sub, sub_date, remaining_days]
    if sub_date:
        remaining_days = await calculate_remaining_days(sub_date, flag)

    for i in user_info:
        if i is None:
            i = ''
    if flag == 2:
        subscribe = "–ë–∞–∑–æ–≤—ã–π"
    elif flag == 3:
        subscribe = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"
    elif flag == 5:
        subscribe = "–ü—Ä–µ–º–∏—É–º"

    if period_sub == 1:
        period = "–ú–µ—Å—è—Ü"
    elif period_sub == 6:
        period = "6 –º–µ—Å—è—Ü–µ–≤"
    elif period_sub == 12:
        period = "–ì–æ–¥"

    profile_text = (
        "üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üë§ –í–∞—à ID: {user_id}\n\n"
        f"‚úÖ –¢–∞—Ä–∏—Ñ: {subscribe}\n\n"
        f"üìï –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: {period}\n\n"
        f"‚è≥ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n"
        f"üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {remaining_days}\n"
    )
    return profile_text


async def Subscribe():
    subscribe_text = (
        '–•–æ—á–µ—à—å –¥–∞–ª—å—à–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º Izi, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–±–µ —Ç–∞—Ä–∏—Ñ üëá\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –ë–∞–∑–æ–≤—ã–π:'
        '\n35 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - –Ω–∞ –æ—Ç–≤–µ—Ç—ã Izi –≤ —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'
        '\n15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - Izi —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π:'
        '\n–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –æ—Ç–≤–µ—Ç—ã Izi –≤ —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'
        '\n40 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - Izi —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –ü—Ä–µ–º–∏—É–º:'
        '\n–ü–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –≤—Å–µ üòã\n\n'
        '‚ò∫Ô∏è–ö–∞–∂–¥—ã–π —Ç–∞—Ä–∏—Ñ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã üóì'
    )
    return subscribe_text


async def counting_pay(factor, user_id):
    sub_sum = Metadata.sub_sum * factor
    await bot.send_invoice(
        chat_id=user_id,
        title='–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∫ –æ–ø–ª–∞—Ç–µ',
        description='–¢–∞—Ä–∏—Ñ',
        payload='month_sub',
        provider_token=YOOTOKEN,
        currency='RUB',
        prices=[LabeledPrice(label='–¢–∞—Ä–∏—Ñ ' + Metadata.subscription, amount=sub_sum)],
        max_tip_amount=1000000000,
        suggested_tip_amounts=[5000, 10000, 15000, 20000],
        start_parameter='Izi_bot',
        provider_data=None,
        # photo_url='https://i.ibb.co/zGw5X0B/image.jpg',
        # photo_size=100,
        # photo_width=800,
        # photo_height=450,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=False,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=inline_kb_pay,
        request_timeout=15
    )
