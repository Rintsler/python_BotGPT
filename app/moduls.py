import traceback
import openai
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, CallbackQuery, Message, FSInputFile, InputMediaPhoto
from magic_filter import F

from app.modul_Kandinsky3_0 import send_image_kandinsky
from app.update_keys import get_unused_key, update_key_status, reset_key_status, log_error, set_key_status_to_2
from data.config import bot, YOOTOKEN, admins_id
from data.db_app import get_user_data, update_requests, sum_balans, get_balans, update_subscribe, update_balans, \
    save_banking_details
from data.metadata import Metadata
from nav.keyboard import inline_kb_pay, inline_Pay_b_m, menu_keyboard, inline_back_to_ref
import asyncio
from datetime import datetime


# REQUEST =============================================================
async def generate_response(user_id, chat_history, message, request, request_img):
    # –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞
    api_key = await get_unused_key()
    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø–æ–ª—É—á–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if api_key is None:
        bot.send_message(user_id, "–ú—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É, "
                                  "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, "
                                  "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
    try:
        await update_key_status(api_key, 1)

        system_message = {"role": "system", "content": "–¢–µ–±—è –∑–æ–≤—É—Ç Izi, —Ç—ã –¥–µ–≤—É—à–∫–∞,"
                                                       "–æ—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ –∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–∏—Ç–µ–ª—å–Ω–æ,"
                                                       "–æ—Ç–≤–µ—á–∞—Ç—å –º–æ–∂–µ—à—å –∏–Ω–æ–≥–¥–∞ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º"}
        messages = [system_message] + chat_history[-20:]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-16k",
            api_key=api_key,
            messages=messages,
            temperature=0.8,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        otvet = response['choices'][0]['message']['content'].strip()
        print(response)
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã request, request_img –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        if request > 0:
            await update_requests(user_id, request - 1, request_img)
        await reset_key_status(api_key)
        return otvet
    except (openai.error.RateLimitError, openai.error.Timeout) as e:
        error_text = traceback.format_exc()
        await log_error(api_key, error_text)
        print(f"–û—à–∏–±–∫–∞: {e}")
        return generate_response(user_id, chat_history, message, request, request_img)


# END REQUEST =============================================================


# TEXT OUTPUT ==========================================================
async def profile(user_id, switch=0):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_data
    (pk, state_ai, user_id, flag, username, registration_date, chat_history,
     response_history, request, request_img, period_sub, sub_date, sub_date_end,
     remaining_days, referrer, referrals, last_amount, sum_amount, balans,
     banking_details) = await get_user_data(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    string_period = f'{sub_date} - {sub_date_end}\n\n' if sub_date_end is not None else '\n\n'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º referrals
    string_referrals = f'{referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)\n\n' if referrals is not None else '\n\n'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º remaining_days
    string_remaining_days = f'{remaining_days} –¥–Ω—è(–µ–π)\n\n' if remaining_days is not None else '\n\n'

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º balans
    string_balans = f'{balans} —Ä—É–±.' if balans is not None else ''

    request = '–ë–µ–∑–ª–∏–º–∏—Ç' if request < 0 else request
    request_img = '–ë–µ–∑–ª–∏–º–∏—Ç' if request_img < 0 else request_img

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    subscribe = {
        2: "–ë–∞–∑–æ–≤—ã–π",
        3: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
        4: "–ü—Ä–µ–º–∏—É–º"
    }.get(flag, '')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        "<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üë§ –í–∞—à ID: {user_id}\n\n"
        f"üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n"
        "<b>–¢–∞—Ä–∏—Ñ:</b>\n"
        f"  ‚Ä¢ –¢–∏–ø: {subscribe}\n"
        f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: {string_period}\n"
        "<b>–°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç:</b>\n\n"
        f"üìù –ó–∞–ø—Ä–æ—Å—ã: {request}\n\n"
        f"üèû –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request_img}\n\n"
        f"üìÜ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {string_remaining_days}\n\n"
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n\n"
        f"ü§ù –í—ã –ø—Ä–∏–≤–µ–ª–∏: {string_referrals}\n\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π\n–ø—Ä–æ–≥—Ä–∞–º–º–µ: {string_balans}\n\n"
        f"üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: {banking_details}"
    )
    string_sum_balans = await sum_balans()

    full_profile_text = (
            profile_text +
            f"\n\n\nüí≥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: "
            f"{string_sum_balans}")

    profile_text = full_profile_text if user_id == admins_id[0] or user_id == admins_id[1] else profile_text

    order_profile_text = (
        f"üë§ ID: {user_id}\n\n"
        f"üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n"
        "<b>–¢–∞—Ä–∏—Ñ:</b>\n"
        f"  ‚Ä¢ –¢–∏–ø: {subscribe}\n"
        f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: {string_period}"
        "<b>–°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç:</b>\n\n"
        f"üìù –ó–∞–ø—Ä–æ—Å—ã: {request}\n\n"
        f"üèû –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request_img}\n\n"
        f"üìÜ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {string_remaining_days}"
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n\n"
        f"ü§ù –ü—Ä–∏–≤–µ–ª: {string_referrals}"
        f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π\n–ø—Ä–æ–≥—Ä–∞–º–º–µ: {string_balans}\n\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: {banking_details}"
        f"\n\n\nüí≥ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b> "
        f"{string_sum_balans}")

    return order_profile_text if switch else profile_text


async def ref_menu():
    ref_text = (
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É! '
        '–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –ø—Ä–∏–≤–ª–µ–∫–∞—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π '
        '–≤ –Ω–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É. –ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 10% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥–æ–≥–æ '
        '–ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n'
        '–ú—ã –≥–æ—Ä–¥–∏–º—Å—è –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ '
        '–ø–æ–ª—å–∑—É –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –∑–Ω–∞–Ω–∏–µ–º '
        '—Å –¥—Ä—É–≥–∏–º–∏ –∏ –ø–æ–º–æ—á—å –∏–º —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n'
        '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Å—Ç–∞ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞: –≤—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é '
        '—É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –∏ –∫–æ–≥–¥–∞ –æ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç '
        '—Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç —Å—É–º–º—ã —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –í–∞—à–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ '
        '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –∏ –∑–∞–≤–∏—Å—è—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n'
        '–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ '
        '–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –£ –≤–∞—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –≤–∫–ª—é—á–∞—é—â–µ–π '
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏—è—Ö. '
        '–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å –≤–∞–º '
        '–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.'
        '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ '
        '—Å–µ–π—á–∞—Å! –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.'
    )
    return ref_text


async def Subscribe():
    subscribe_text = (
        '–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º Izi, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–±–µ —Ç–∞—Ä–∏—Ñ üëá\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –ë–∞–∑–æ–≤—ã–π:'
        '\n35 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - –Ω–∞ –æ—Ç–≤–µ—Ç—ã Izi –≤ —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'
        '\n15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - Izi —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π:'
        '\n–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –æ—Ç–≤–µ—Ç—ã Izi –≤ —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'
        '\n40 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏ - Izi —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ –ü—Ä–µ–º–∏—É–º:'
        '\n–ü–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –≤—Å–µ üòã\n\n'
        '‚ò∫Ô∏è–ö–∞–∂–¥—ã–π —Ç–∞—Ä–∏—Ñ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã üóì'
    )
    return subscribe_text


async def calc_sum(sub_sum):
    if Metadata.calc_sum_flag:
        Metadata.sub_sum1 = sub_sum * 1
        Metadata.sub_sum2 = sub_sum * 5
        Metadata.sub_sum3 = sub_sum * 10
        Metadata.calc_sum_flag = False


# PAY====================================================
async def bonus_in_pay(call: CallbackQuery):
    if Metadata.bonus >= Metadata.sub_sum:
        Metadata.bonus = Metadata.bonus - Metadata.sub_sum
        await update_balans(Metadata.bonus, Metadata.user_id)
        await successful_pay(Metadata.user_id)
    else:
        amount = (Metadata.sub_sum - Metadata.bonus) * 100
        Metadata.payment_flag = True
        await order(amount)


async def money_in_pay(call: CallbackQuery):
    amount = Metadata.sub_sum * 100
    await order(amount)


# –î–µ–π—Å—Ç–≤–∏–µ –¥–æ –æ–ø–ª–∞—Ç—ã
async def order(amount):
    description = ''
    if Metadata.subscription == 'Light':
        description = Metadata.description_Light
    elif Metadata.subscription == 'Middle':
        description = Metadata.description_Middle
    elif Metadata.subscription == 'Premium':
        description = Metadata.description_Premium

    await bot.send_invoice(
        chat_id=Metadata.user_id,
        title='–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∫ –æ–ø–ª–∞—Ç–µ',
        description='–¢–∞—Ä–∏—Ñ',
        payload='month_sub',
        provider_token=YOOTOKEN,
        currency='RUB',
        prices=[
            LabeledPrice(label='–¢–∞—Ä–∏—Ñ ' + Metadata.subscription + '\n' + description, amount=amount)],
        max_tip_amount=1000000,
        suggested_tip_amounts=[5000, 10000, 15000, 20000],
        start_parameter='Izi_bot',
        provider_data=None,
        # photo_url='https://i.ibb.co/zGw5X0B/image.jpg',
        # photo_size=100,
        # photo_width=800,
        # photo_height=450,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=False,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=inline_kb_pay,
        request_timeout=15
    )


# –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
async def successful_pay(user_id):
    sub_date = datetime.now().date()
    sub_date_end = ''

    if Metadata.payment_flag:
        await update_balans(0, user_id)
        Metadata.payment_flag = False

    # –£–≤–µ–ª–∏—á–∏—Ç—å sub_date –Ω–∞ –º–µ—Å—è—Ü
    if Metadata.sub_period == 1:
        sub_date_end = sub_date.replace(month=(sub_date.month + 1) % 12)

    # –£–≤–µ–ª–∏—á–∏—Ç—å sub_date –Ω–∞ –ø–æ–ª –≥–æ–¥–∞
    elif Metadata.sub_period == 6:
        if sub_date.month + 6 <= 12:
            sub_date_end = sub_date.replace(month=sub_date.month + 6)
        else:
            sub_date_end = sub_date.replace(year=sub_date.year + 1, month=(sub_date.month + 6) % 12,
                                            day=sub_date.day)
    # –£–≤–µ–ª–∏—á–∏—Ç—å sub_date –Ω–∞ –æ–¥–∏–Ω –≥–æ–¥
    elif Metadata.sub_period == 12:
        sub_date_end = sub_date.replace(year=sub_date.year + 1)

    sub_date = datetime.strftime(sub_date, '%d.%m.%Y')
    sub_date_end = datetime.strftime(sub_date_end, '%d.%m.%Y')
    if Metadata.subscription == 'Light':
        request = 35
        request_img = 15
        await update_subscribe(2, sub_date, sub_date_end, request, request_img, Metadata.sub_period,
                               Metadata.sub_sum, user_id)
    elif Metadata.subscription == 'Middle':
        request = -1
        request_img = 40
        await update_subscribe(3, sub_date, sub_date_end, request, request_img, Metadata.sub_period,
                               Metadata.sub_sum, user_id)
    elif Metadata.subscription == 'Premium':
        request = -1
        request_img = -1
        await update_subscribe(4, sub_date, sub_date_end, request, request_img, Metadata.sub_period,
                               Metadata.sub_sum, user_id)

    response_text = f'–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Ç–∞—Ä–∏—Ñ {Metadata.subscription}, –æ–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {sub_date_end}. –°–ø–∞—Å–∏–±–æ!'
    await bot.send_message(user_id, response_text, reply_markup=menu_keyboard)


async def counting_pay(factor, user_id):
    Metadata.bonus = await get_balans(user_id)
    Metadata.sub_sum = Metadata.sub_sum_db * factor
    Metadata.user_id = user_id

    if Metadata.bonus != 0:
        await bot.send_message(user_id, text=f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {Metadata.sub_sum} —Ä—É–±.\n'
                                             f'–°—É–º–º–∞ –≤–∞—à–µ–≥–æ –±–æ–Ω—É—Å–∞: {Metadata.bonus} —Ä—É–±.', reply_markup=inline_Pay_b_m)
    else:
        amount = Metadata.sub_sum * 100
        await order(amount)


async def media_group_img(message):
    styles = ["UHD", "ANIME", "DEFAULT"]
    for style in styles:
        await send_image_kandinsky(message, message.text, style)
        FSInputFile(f"image_Kandinsky3_0/{message.from_user.id}+{style}.jpg")

    image1 = InputMediaPhoto(type='photo', media=FSInputFile(
        f"image_Kandinsky3_0/{message.from_user.id}+UHD.jpg"), caption='–ù–µ–π—Ä–æ—Å–µ—Ç—å: Kandinsky 3.0\n'
                                                                             '–ù–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ '
                                                                             '4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏')
    image2 = InputMediaPhoto(type='photo', media=FSInputFile(
        f"image_Kandinsky3_0/{message.from_user.id}+ANIME.jpg"))
    image3 = InputMediaPhoto(type='photo', media=FSInputFile(
        f"image_Kandinsky3_0/{message.from_user.id}+DEFAULT.jpg"))

    media = [image1, image2, image3]

    return media


# FOR Start =============================================================
async def media_group_img_start():
    image1 = InputMediaPhoto(type='photo', media=FSInputFile(f"res/Kandinsky2_2.jpg"),
                             caption='–ù–µ–π—Ä–æ—Å–µ—Ç—å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π 2.2\n–ó–∞–ø—Ä–æ—Å: "red cat, 4k photo"')
    image2 = InputMediaPhoto(type='photo', media=FSInputFile(f"res/Kandinsky3_0.jpg"),
                             caption='–ù–µ–π—Ä–æ—Å–µ—Ç—å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π 3.0\n–ó–∞–ø—Ä–æ—Å: "–ò–∑—è—â–µ—Å—Ç–≤–æ –∏ –∫—Ä–∞—Å–æ—Ç–∞ '
                                     '–º–æ–≥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –¥–∞–∂–µ –≤ —Å–∞–º—ã—Ö —Å—É—Ä–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ø–µ—Ä–≤–æ–±—ã—Ç–Ω–æ—Å—Ç–∏Color '
                                     'Grading, Shot on 70mm, Daguerrotype, F/2.8, CRT"')
    media = [image1, image2]

    return media


async def save_requisites(message: Message, state: FSMContext):
    await save_banking_details(message.from_user.id, message.text)
    await message.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±–æ–Ω—É—Å–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: <b>{message.text}</b>",
                         reply_markup=inline_back_to_ref)
    await state.clear()
