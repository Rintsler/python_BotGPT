import datetime
import time
import traceback
from datetime import datetime, timedelta
import openai
from aiogram.types import LabeledPrice
from app.update_keys import get_unused_key, update_key_status, reset_key_status, log_error, set_key_status_to_2
from data.config import bot, YOOTOKEN
from data.db_app import calculate_remaining_tokens, update_tokens_used, get_user_data
from data.metadata import Metadata
from nav.keyboard import inline_kb_pay


async def calculate_remaining_days(sub_date, flag):
    try:
        db_datetime = datetime.strptime(sub_date, "%Y-%m-%d %H:%M:%S")
        current_date = datetime.now()
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        if flag == 3:
            remaining_days = (db_datetime + timedelta(days=30)) - current_date
            return max(remaining_days.days, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0
        if flag == 4:
            remaining_days = (db_datetime + timedelta(days=180)) - current_date
            return max(remaining_days.days, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0
        if flag == 5:
            remaining_days = (db_datetime + timedelta(days=365)) - current_date
            return max(remaining_days.days, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
        return None


async def generate_response(user_id, chat_history, message):
    api_key = await get_unused_key()
    while not api_key:
        print("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
        time.sleep(10)
        api_key = await get_unused_key()
    try:
        await update_key_status(api_key, 1)

        system_message = {"role": "system", "content": "You are a helpful assistant"}
        messages = [system_message] + chat_history[-5:]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-16k",
            api_key=api_key,
            messages=messages,
            temperature=0.8,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        otvet = response['choices'][0]['message']['content'].strip()
        tokens_used = len(otvet)
        print("tokens_used: ", tokens_used)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü tokens_used –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_tokens_used(tokens_used, user_id)
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü tokens_used –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await calculate_remaining_tokens(user_id)
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü remaining_tokens –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await reset_key_status(api_key)
        return otvet
    except (openai.error.RateLimitError, openai.error.Timeout) as e:
        error_text = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ RateLimit: {e}")
        await log_error(api_key, error_text)
        return handle_rate_limit_error(user_id, api_key, chat_history, message)


async def handle_rate_limit_error(user_id, api_key, chat_history, message):
    await set_key_status_to_2(api_key)
    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑")
    api_key = await get_unused_key()
    print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑2")
    while not api_key:
        # print("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
        time.sleep(10)
        api_key = await get_unused_key()
    try:
        await update_key_status(api_key, 1)
        print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑3")
        system_message = {"role": "system", "content": "You are a helpful assistant"}
        messages = [system_message] + chat_history[-5:]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            api_key=api_key,
            messages=messages,
            temperature=0.8,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        otvet = response['choices'][0]['message']['content'].strip()
        print("–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑")
        tokens_used = len(otvet)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü tokens_used –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_tokens_used(tokens_used, user_id)
        await reset_key_status(api_key)
        return otvet
    except (openai.error.RateLimitError, openai.error.Timeout) as e:
        error_text = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ RateLimit: {e}")
        await log_error(api_key, error_text)
        return handle_rate_limit_error(user_id, api_key, chat_history, message)


async def profile(user_id):
    subscribe = ''
    pk, state_ai, user_id, flag, username, registration_date, chat_history, response_history, request, request_img, \
        tokens_used, sub_date, remaining_days, remaining_tokens = await get_user_data(user_id)
    user_info = [pk, user_id, flag, username, registration_date, chat_history, response_history, request, request_img,
                 tokens_used, sub_date, remaining_days, remaining_tokens]
    if sub_date:
        remaining_days = await calculate_remaining_days(sub_date, flag)

    for i in user_info:
        if i is None:
            i = ''
    if flag == 3:
        subscribe = "1 –º–µ—Å—è—Ü"
        remaining_tokens = "–¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞"
    elif flag == 4:
        subscribe = "6 –º–µ—Å—è—Ü–µ–≤"
        remaining_tokens = "–¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞"
    elif flag == 5:
        subscribe = "1 –≥–æ–¥"
        remaining_tokens = "–¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞"

    profile_text = (
        f"\tüìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üë§ –í–∞—à ID: {user_id}\n"
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {subscribe}\n"
        f"üìï –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: {remaining_tokens}\n"
        f"‚è≥ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {remaining_days}\n"
    )
    return profile_text


async def Subscribe():
    subscribe_text = (
        '–•–æ—á–µ—à—å –¥–∞–ª—å—à–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º IZI, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–±–µ —Ç–∞—Ä–∏—Ñ üëá\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ Light:'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ Middle:'
        '\n\n'
        '‚≠êÔ∏è –¢–∞—Ä–∏—Ñ Premium:'
        '\n\n'
        '‚ò∫Ô∏è–ö–∞–∂–¥—ã–π —Ç–∞—Ä–∏—Ñ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã üóì'
    )
    return subscribe_text


async def counting_pay(factor, description, user_id, sub_sum=0):
    if Metadata.subscription in '–ü–æ–¥–ø–∏—Å–∫–∞ Light':
        sub_sum = 10000 * factor
    elif Metadata.subscription in '–ü–æ–¥–ø–∏—Å–∫–∞ Middle':
        sub_sum = 35000 * factor
    elif Metadata.subscription in '–ü–æ–¥–ø–∏—Å–∫–∞ Full':
        sub_sum = 60000 * factor
    await bot.send_invoice(
        chat_id=user_id,
        title='–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∫ –æ–ø–ª–∞—Ç–µ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É',
        description=description,
        payload='month_sub',
        provider_token=YOOTOKEN,
        currency='RUB',
        prices=[LabeledPrice(label=Metadata.subscription, amount=sub_sum)],
        max_tip_amount=30000,
        suggested_tip_amounts=[5000, 10000, 15000, 20000],
        start_parameter='test_bot',
        provider_data=None,
        # photo_url='https://i.ibb.co/zGw5X0B/image.jpg',
        # photo_size=100,
        # photo_width=800,
        # photo_height=450,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=False,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=inline_kb_pay,
        request_timeout=15
    )
